<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\_build\mixedNuts.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\_build\mixedNuts.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Mon Jul 02 08:59:46 2018
<BR><P>
<H3>Maximum Stack Usage =       2640 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; ble_send_nus_data &rArr; packetize_record &rArr; get_next_record &rArr; load_output_buffer &rArr; inform_rec_tranceived &rArr;  load_output_buffer (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">NMI_Handler</a><BR>
 <LI><a href="#[4]">MemoryManagement_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">MemoryManagement_Handler</a><BR>
 <LI><a href="#[5]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">BusFault_Handler</a><BR>
 <LI><a href="#[6]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">UsageFault_Handler</a><BR>
 <LI><a href="#[7]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">SVC_Handler</a><BR>
 <LI><a href="#[8]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">DebugMon_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
 <LI><a href="#[a]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SysTick_Handler</a><BR>
 <LI><a href="#[1a]">CCM_AAR_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">CCM_AAR_IRQHandler</a><BR>
 <LI><a href="#[74]">__asm___11_app_timer_c_cd27f9c3__nrf_delay_us</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[74]">__asm___11_app_timer_c_cd27f9c3__nrf_delay_us</a><BR>
 <LI><a href="#[72]">__asm___11_nrf_delay_c_532987f3__nrf_delay_us</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[72]">__asm___11_nrf_delay_c_532987f3__nrf_delay_us</a><BR>
 <LI><a href="#[78]">__asm___9_bq25120_c_a722ed14__nrf_delay_us</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">__asm___9_bq25120_c_a722ed14__nrf_delay_us</a><BR>
 <LI><a href="#[1a1]">lsm6ds3_wake_on_motion</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[226]">lsm6ds3_disable_sensors</a><BR>
 <LI><a href="#[75]">__asm___9_lsm6ds3_c_09874117__nrf_delay_us</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[75]">__asm___9_lsm6ds3_c_09874117__nrf_delay_us</a><BR>
 <LI><a href="#[139]">inform_rec_tranceived</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e1]">load_output_buffer</a><BR>
 <LI><a href="#[76]">__asm___10_spiflash_c_7bbececb__nrf_delay_us</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[76]">__asm___10_spiflash_c_7bbececb__nrf_delay_us</a><BR>
 <LI><a href="#[71]">__asm___18_si115x_functions_c_571b282e__nrf_delay_us</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[71]">__asm___18_si115x_functions_c_571b282e__nrf_delay_us</a><BR>
 <LI><a href="#[77]">__asm___9_battery_c_00816f10__nrf_delay_us</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[77]">__asm___9_battery_c_00816f10__nrf_delay_us</a><BR>
 <LI><a href="#[73]">__asm___13_nrf_drv_twi_c_a9bcf68d__nrf_delay_us</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">__asm___13_nrf_drv_twi_c_a9bcf68d__nrf_delay_us</a><BR>
 <LI><a href="#[167]">command_end_procedure_run</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[165]">sm_state_change</a><BR>
 <LI><a href="#[165]">sm_state_change</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[165]">sm_state_change</a><BR>
 <LI><a href="#[70]">__asm___6_main_c_741fae72__nrf_delay_us</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[70]">__asm___6_main_c_741fae72__nrf_delay_us</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[5]">BusFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1a]">CCM_AAR_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1e]">COMP_LPCOMP_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[19]">ECB_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2f]">FPU_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[11]">GPIOTE_IRQHandler</a> from nrf_drv_gpiote.o(i.GPIOTE_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from main.o(i.HardFault_Handler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2e]">I2S_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[29]">MWU_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[4]">MemoryManagement_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[10]">NFCT_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[28]">PDM_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[b]">POWER_CLOCK_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[27]">PWM0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2a]">PWM1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2b]">PWM2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1d]">QDEC_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[c]">RADIO_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[18]">RNG_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[16]">RTC0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1c]">RTC1_IRQHandler</a> from app_timer.o(i.RTC1_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2d]">RTC2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1]">Reset_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[12]">SAADC_IRQHandler</a> from nrf_drv_saadc.o(i.SAADC_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[e]">SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</a> from nrf_drv_twi.o(i.SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[f]">SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</a> from nrf_drv_spi.o(i.SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2c]">SPIM2_SPIS2_SPI2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1f]">SWI0_EGU0_IRQHandler</a> from app_timer.o(i.SWI0_EGU0_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[20]">SWI1_EGU1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[21]">SWI2_EGU2_IRQHandler</a> from softdevice_handler.o(i.SWI2_EGU2_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[22]">SWI3_EGU3_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[23]">SWI4_EGU4_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[24]">SWI5_EGU5_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[31]">SystemInit</a> from system_nrf52.o(i.SystemInit) referenced from arm_startup_nrf52.o(.text)
 <LI><a href="#[17]">TEMP_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[13]">TIMER0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[14]">TIMER1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[15]">TIMER2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[25]">TIMER3_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[26]">TIMER4_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[d]">UARTE0_UART0_IRQHandler</a> from nrf_drv_uart.o(i.UARTE0_UART0_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[6]">UsageFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1b]">WDT_IRQHandler</a> from nrf_drv_wdt.o(i.WDT_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[32]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from arm_startup_nrf52.o(.text)
 <LI><a href="#[34]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[47]">add_accel_buffer</a> from hal_imu.o(i.add_accel_buffer) referenced from hal_imu.o(i.imu_init)
 <LI><a href="#[46]">add_gyro_buffer</a> from hal_imu.o(i.add_gyro_buffer) referenced from hal_imu.o(i.imu_init)
 <LI><a href="#[38]">battery_adc_callback</a> from battery.o(i.battery_adc_callback) referenced from battery.o(i.battery_init)
 <LI><a href="#[36]">battery_measurement_timer_handler</a> from battery.o(i.battery_measurement_timer_handler) referenced from battery.o(i.battery_init)
 <LI><a href="#[37]">battery_sm_timer_handler</a> from battery.o(i.battery_sm_timer_handler) referenced from battery.o(i.battery_init)
 <LI><a href="#[3a]">ble_evt_dispatch</a> from main.o(i.ble_evt_dispatch) referenced from main.o(i.ble_stack_init)
 <LI><a href="#[4f]">check_timer_cb</a> from spiflash.o(i.check_timer_cb) referenced from spiflash.o(i.spiflash_init)
 <LI><a href="#[49]">conn_params_error_handler</a> from main.o(i.conn_params_error_handler) referenced from main.o(i.main)
 <LI><a href="#[69]">data_page_erase_state_run</a> from pstorage.o(i.data_page_erase_state_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[68]">data_to_swap_write_state_run</a> from pstorage.o(i.data_to_swap_write_state_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[53]">detach_handler</a> from comms.o(i.detach_handler) referenced from main.o(i.timers_init)
 <LI><a href="#[40]">device_manager_evt_handler</a> from main.o(i.device_manager_evt_handler) referenced from main.o(i.device_manager_init)
 <LI><a href="#[4a]">dfu_control_data_handler</a> from main.o(i.dfu_control_data_handler) referenced from main.o(i.services_init)
 <LI><a href="#[41]">dm_pstorage_cb_handler</a> from vsp_device_manager_peripheral.o(i.dm_pstorage_cb_handler) referenced from vsp_device_manager_peripheral.o(i.dm_init)
 <LI><a href="#[4e]">erase_sm</a> from spiflash.o(i.erase_sm) referenced from spiflash.o(i.spiflash_erase_4k_block)
 <LI><a href="#[4e]">erase_sm</a> from spiflash.o(i.erase_sm) referenced from spiflash.o(i.spiflash_page_erase)
 <LI><a href="#[60]">gattc_context_apply</a> from vsp_device_manager_peripheral.o(i.gattc_context_apply) referenced from vsp_device_manager_peripheral.o(.constdata)
 <LI><a href="#[5c]">gattc_context_load</a> from vsp_device_manager_peripheral.o(i.gattc_context_load) referenced from vsp_device_manager_peripheral.o(.constdata)
 <LI><a href="#[58]">gattc_context_store</a> from vsp_device_manager_peripheral.o(i.gattc_context_store) referenced from vsp_device_manager_peripheral.o(.constdata)
 <LI><a href="#[5f]">gatts_context_apply</a> from vsp_device_manager_peripheral.o(i.gatts_context_apply) referenced from vsp_device_manager_peripheral.o(.constdata)
 <LI><a href="#[5b]">gatts_context_load</a> from vsp_device_manager_peripheral.o(i.gatts_context_load) referenced from vsp_device_manager_peripheral.o(.constdata)
 <LI><a href="#[57]">gatts_context_store</a> from vsp_device_manager_peripheral.o(i.gatts_context_store) referenced from vsp_device_manager_peripheral.o(.constdata)
 <LI><a href="#[61]">gattsc_context_apply</a> from vsp_device_manager_peripheral.o(i.gattsc_context_apply) referenced from vsp_device_manager_peripheral.o(.constdata)
 <LI><a href="#[5d]">gattsc_context_load</a> from vsp_device_manager_peripheral.o(i.gattsc_context_load) referenced from vsp_device_manager_peripheral.o(.constdata)
 <LI><a href="#[59]">gattsc_context_store</a> from vsp_device_manager_peripheral.o(i.gattsc_context_store) referenced from vsp_device_manager_peripheral.o(.constdata)
 <LI><a href="#[6b]">head_restore_state_run</a> from pstorage.o(i.head_restore_state_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[54]">led_flash_timer_handler</a> from led.o(i.led_flash_timer_handler) referenced from main.o(i.timers_init)
 <LI><a href="#[6c]">lsm6ds3_i2c_read</a> from lsm6ds3_i2c.o(i.lsm6ds3_i2c_read) referenced from lsm6ds3_i2c.o(.constdata)
 <LI><a href="#[6d]">lsm6ds3_i2c_write</a> from lsm6ds3_i2c.o(i.lsm6ds3_i2c_write) referenced from lsm6ds3_i2c.o(.constdata)
 <LI><a href="#[30]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[3c]">motion_int_handler</a> from main.o(i.motion_int_handler) referenced from main.o(i.config_imu)
 <LI><a href="#[5e]">no_service_context_apply</a> from vsp_device_manager_peripheral.o(i.no_service_context_apply) referenced from vsp_device_manager_peripheral.o(.constdata)
 <LI><a href="#[5a]">no_service_context_load</a> from vsp_device_manager_peripheral.o(i.no_service_context_load) referenced from vsp_device_manager_peripheral.o(.constdata)
 <LI><a href="#[56]">no_service_context_store</a> from vsp_device_manager_peripheral.o(i.no_service_context_store) referenced from vsp_device_manager_peripheral.o(.constdata)
 <LI><a href="#[4b]">nus_data_handler</a> from main.o(i.nus_data_handler) referenced from main.o(i.services_init)
 <LI><a href="#[35]">on_adv_evt</a> from main.o(i.on_adv_evt) referenced from main.o(i.advertising_init)
 <LI><a href="#[48]">on_conn_params_evt</a> from main.o(i.on_conn_params_evt) referenced from main.o(i.main)
 <LI><a href="#[50]">protect_sm</a> from spiflash.o(i.protect_sm) referenced from spiflash.o(i.spiflash_sector_protection)
 <LI><a href="#[3f]">pstorage_store</a> from pstorage.o(i.pstorage_store) referenced from vsp_device_manager_peripheral.o(i.device_context_store)
 <LI><a href="#[3f]">pstorage_store</a> from pstorage.o(i.pstorage_store) referenced from vsp_device_manager_peripheral.o(i.gatts_context_store)
 <LI><a href="#[3e]">pstorage_update</a> from pstorage.o(i.pstorage_update) referenced from vsp_device_manager_peripheral.o(i.device_context_store)
 <LI><a href="#[3e]">pstorage_update</a> from pstorage.o(i.pstorage_update) referenced from vsp_device_manager_peripheral.o(i.gatts_context_store)
 <LI><a href="#[4c]">softdevice_fault_handler</a> from softdevice_handler.o(i.softdevice_fault_handler) referenced from softdevice_handler.o(i.softdevice_handler_init)
 <LI><a href="#[44]">spim_handler</a> from hal_spim.o(i.spim_handler) referenced from hal_spim.o(i.hal_spim_init)
 <LI><a href="#[44]">spim_handler</a> from hal_spim.o(i.spim_handler) referenced from hal_spim.o(i.hal_spim_xfer)
 <LI><a href="#[43]">spim_timer_handler</a> from hal_spim.o(i.spim_timer_handler) referenced from hal_spim.o(i.hal_spim_init)
 <LI><a href="#[64]">state_erase_data_page_entry_run</a> from pstorage.o(i.state_erase_data_page_entry_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[66]">state_restore_head_entry_run</a> from pstorage.o(i.state_restore_head_entry_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[65]">state_restore_tail_entry_run</a> from pstorage.o(i.state_restore_tail_entry_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[62]">state_swap_erase_entry_run</a> from pstorage.o(i.state_swap_erase_entry_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[63]">state_write_data_swap_entry_run</a> from pstorage.o(i.state_write_data_swap_entry_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[3d]">storage_operation_dummy_handler</a> from vsp_device_manager_peripheral.o(i.storage_operation_dummy_handler) referenced from vsp_device_manager_peripheral.o(i.device_context_store)
 <LI><a href="#[67]">swap_erase_state_run</a> from pstorage.o(i.swap_erase_state_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[3b]">sys_evt_dispatch</a> from main.o(i.sys_evt_dispatch) referenced from main.o(i.ble_stack_init)
 <LI><a href="#[6a]">tail_restore_state_run</a> from pstorage.o(i.tail_restore_state_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[52]">ticks_timer_handler</a> from main.o(i.ticks_timer_handler) referenced from main.o(i.timers_init)
 <LI><a href="#[51]">transfer_complete_cb</a> from spiflash.o(i.transfer_complete_cb) referenced from spiflash.o(i.spiflash_xfer)
 <LI><a href="#[33]">twi_handler</a> from si115x_functions.o(i.twi_handler) referenced from si115x_functions.o(i.Si1153_twi_init)
 <LI><a href="#[45]">twim_handler</a> from hal_twim.o(i.twim_handler) referenced from hal_twim.o(i.hal_twim_init)
 <LI><a href="#[42]">update_config_cb</a> from ext_flash.o(i.update_config_cb) referenced from ext_flash.o(i.ext_config_update)
 <LI><a href="#[42]">update_config_cb</a> from ext_flash.o(i.update_config_cb) referenced from ext_flash.o(i.update_config_cb)
 <LI><a href="#[39]">update_timeout_handler</a> from ble_conn_params.o(i.update_timeout_handler) referenced from ble_conn_params.o(i.ble_conn_params_init)
 <LI><a href="#[55]">wdt_event_handler</a> from main.o(i.wdt_event_handler) referenced from main.o(i.timers_init)
 <LI><a href="#[4d]">write_sm</a> from spiflash.o(i.write_sm) referenced from spiflash.o(i.spiflash_byte_page_write)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[32]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(.text)
</UL>
<P><STRONG><a name="[287]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[6e]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[8d]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[288]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[289]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[28a]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[28b]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[28c]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[70]"></a>__asm___6_main_c_741fae72__nrf_delay_us</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, main.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_main_c_741fae72__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_main_c_741fae72__nrf_delay_us
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timers_init
</UL>

<P><STRONG><a name="[71]"></a>__asm___18_si115x_functions_c_571b282e__nrf_delay_us</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, si115x_functions.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___18_si115x_functions_c_571b282e__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si115xParamSet
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___18_si115x_functions_c_571b282e__nrf_delay_us
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si115xWriteToRegister
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si115xReadFromRegister
</UL>

<P><STRONG><a name="[72]"></a>__asm___11_nrf_delay_c_532987f3__nrf_delay_us</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, nrf_delay.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_nrf_delay_c_532987f3__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_nrf_delay_c_532987f3__nrf_delay_us
</UL>

<P><STRONG><a name="[73]"></a>__asm___13_nrf_drv_twi_c_a9bcf68d__nrf_delay_us</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, nrf_drv_twi.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_nrf_drv_twi_c_a9bcf68d__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_nrf_drv_twi_c_a9bcf68d__nrf_delay_us
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
</UL>

<P><STRONG><a name="[74]"></a>__asm___11_app_timer_c_cd27f9c3__nrf_delay_us</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, app_timer.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_app_timer_c_cd27f9c3__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_app_timer_c_cd27f9c3__nrf_delay_us
</UL>

<P><STRONG><a name="[75]"></a>__asm___9_lsm6ds3_c_09874117__nrf_delay_us</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, lsm6ds3.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___9_lsm6ds3_c_09874117__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_fifo_management
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___9_lsm6ds3_c_09874117__nrf_delay_us
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_reconfigure_fifo
</UL>

<P><STRONG><a name="[76]"></a>__asm___10_spiflash_c_7bbececb__nrf_delay_us</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, spiflash.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___10_spiflash_c_7bbececb__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___10_spiflash_c_7bbececb__nrf_delay_us
</UL>

<P><STRONG><a name="[77]"></a>__asm___9_battery_c_00816f10__nrf_delay_us</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, battery.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___9_battery_c_00816f10__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___9_battery_c_00816f10__nrf_delay_us
</UL>

<P><STRONG><a name="[78]"></a>__asm___9_bq25120_c_a722ed14__nrf_delay_us</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, bq25120.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___9_bq25120_c_a722ed14__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___9_bq25120_c_a722ed14__nrf_delay_us
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq2510_reg_defaults
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq25120_read_status
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq25120_init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq25120_en_shipmode
</UL>

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>MemoryManagement_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>CCM_AAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>COMP_LPCOMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>ECB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>MWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>NFCT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>PDM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>POWER_CLOCK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>PWM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>QDEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>RADIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>RTC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>RTC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>SPIM2_SPIS2_SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SWI1_EGU1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SWI3_EGU3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SWI4_EGU4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SWI5_EGU5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TEMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrs_butterworth_filter
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_update_status
</UL>

<P><STRONG><a name="[a1]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_record
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_load
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_UpBuffer_Retrieve
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_record
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_twim_xfer
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ext_flash
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_copy_log
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_log
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_output_buffer
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_xfer
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_write_data
</UL>

<P><STRONG><a name="[11a]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;form_version_strings
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_context_store
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_rotation_coeffecients
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spim_xfer
</UL>

<P><STRONG><a name="[28d]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_store_data
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_sanity_check
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[28e]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[28f]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_instance_init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_sanity_check
</UL>

<P><STRONG><a name="[ec]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_add
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_char_add
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_char_add
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetize_record
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_enable_get_default_config
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_context_store
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_pstorage_cb_handler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_state_char_add
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_level_char_add
</UL>

<P><STRONG><a name="[290]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[a7]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_ascii_to_utf8
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteString
</UL>

<P><STRONG><a name="[195]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_context_store
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_pstorage_cb_handler
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_instance_find
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_config_cb
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_log
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_init
</UL>

<P><STRONG><a name="[c5]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;form_version_strings
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>

<P><STRONG><a name="[7e]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_peak
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrs_butterworth_bpf_init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>

<P><STRONG><a name="[83]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HRMs
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrs_butterworth_bpf_init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[84]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_peak
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrs_butterworth_bpf_init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[85]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HRMs
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrs_butterworth_bpf_init
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initStepDetect_2
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_rotation_coeffecients
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[86]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrs_butterworth_bpf_init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_rotation_coeffecients
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
</UL>

<P><STRONG><a name="[87]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_peak
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HRMs
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[88]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initStepDetect_2
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_rotation_coeffecients
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[89]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_peak
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HRMs
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_rotation_coeffecients
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[8b]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initStepDetect_2
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_rotation_coeffecients
</UL>

<P><STRONG><a name="[8c]"></a>__aeabi_d2lz</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dfixl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2lz
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrs_butterworth_bpf_init
</UL>

<P><STRONG><a name="[93]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HRMs
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrs_butterworth_bpf_init
</UL>

<P><STRONG><a name="[291]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_peak
</UL>

<P><STRONG><a name="[18e]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_peak
</UL>

<P><STRONG><a name="[7a]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[292]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[293]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[294]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[295]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[81]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>

<P><STRONG><a name="[6f]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[296]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[297]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[298]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[11]"></a>GPIOTE_IRQHandler</STRONG> (Thumb, 316 bytes, Stack size 48 bytes, nrf_drv_gpiote.o(i.GPIOTE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GPIOTE_IRQHandler &rArr; nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_is_set
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>Get_HRMs</STRONG> (Thumb, 1418 bytes, Stack size 64 bytes, si115x_functions.o(i.Get_HRMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Get_HRMs &rArr; detect_peak &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_peak
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, main.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = HardFault_Handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>RTC1_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_timer.o(i.RTC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = RTC1_IRQHandler &rArr; timer_timeouts_check &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SAADC_IRQHandler</STRONG> (Thumb, 346 bytes, Stack size 40 bytes, nrf_drv_saadc.o(i.SAADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SAADC_IRQHandler &rArr; nrf_drv_saadc_buffer_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_buffer_convert
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_check
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_channel_input_set
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_buffer_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>SEGGER_RTT_ConfigDownBuffer</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, segger_rtt.o(i.SEGGER_RTT_ConfigDownBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SEGGER_RTT_ConfigDownBuffer &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_init
</UL>

<P><STRONG><a name="[9e]"></a>SEGGER_RTT_ConfigUpBuffer</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, segger_rtt.o(i.SEGGER_RTT_ConfigUpBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SEGGER_RTT_ConfigUpBuffer &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_init
</UL>

<P><STRONG><a name="[9f]"></a>SEGGER_RTT_UpBuffer_Retrieve</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, segger_rtt.o(i.SEGGER_RTT_UpBuffer_Retrieve))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SEGGER_RTT_UpBuffer_Retrieve
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_remote_console
</UL>

<P><STRONG><a name="[a2]"></a>SEGGER_RTT_Write</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, segger_rtt.o(i.SEGGER_RTT_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteString
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
</UL>

<P><STRONG><a name="[a3]"></a>SEGGER_RTT_WriteNoLock</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, segger_rtt.o(i.SEGGER_RTT_WriteNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[a6]"></a>SEGGER_RTT_WriteString</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, segger_rtt.o(i.SEGGER_RTT_WriteString))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SEGGER_RTT_WriteString &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_write_string
</UL>

<P><STRONG><a name="[a8]"></a>SEGGER_RTT_vprintf</STRONG> (Thumb, 406 bytes, Stack size 120 bytes, segger_rtt_printf.o(i.SEGGER_RTT_vprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
</UL>

<P><STRONG><a name="[273]"></a>SPIFLASH_KEY_MATCH</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, spiflash.o(i.SPIFLASH_KEY_MATCH))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_wakeup
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_sector_protection
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_read
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_page_erase
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_erase_4k_block
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_deep_power_down
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_byte_page_write
</UL>

<P><STRONG><a name="[ac]"></a>SPIFLASH_LOCK</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, spiflash.o(i.SPIFLASH_LOCK))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SPIFLASH_LOCK &rArr; log_rtt_write_string &rArr; SEGGER_RTT_WriteString &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_write_string
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSystemTimeMs
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_config_update
</UL>

<P><STRONG><a name="[af]"></a>SPIFLASH_RELEASE</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, spiflash.o(i.SPIFLASH_RELEASE))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SPIFLASH_RELEASE &rArr; log_rtt_write_string &rArr; SEGGER_RTT_WriteString &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_write_string
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_config_cb
</UL>

<P><STRONG><a name="[e]"></a>SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler &rArr; irq_handler_twim
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_twim
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_spi.o(i.SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler &rArr; irq_handler_spim
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_spim
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SWI0_EGU0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_timer.o(i.SWI0_EGU0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SWI0_EGU0_IRQHandler &rArr; timer_list_handler &rArr; compare_reg_update &rArr; rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SWI2_EGU2_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, softdevice_handler.o(i.SWI2_EGU2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = SWI2_EGU2_IRQHandler &rArr; intern_softdevice_events_execute &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intern_softdevice_events_execute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>SetIRLEDAnode</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, si115x_functions.o(i.SetIRLEDAnode))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = SetIRLEDAnode &rArr; led &rArr; led_start_flash_timer &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrm_read_cmd
</UL>

<P><STRONG><a name="[b7]"></a>Si1153_Init</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, si115x_functions.o(i.Si1153_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = Si1153_Init &rArr; Si115xParamSet &rArr; _waitUntilSleep &rArr; Si115xReadFromRegister &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si115xReset
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si115xParamSet
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bb]"></a>Si1153_twi_init</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, si115x_functions.o(i.Si1153_twi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = Si1153_twi_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_enable
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ba]"></a>Si115xParamSet</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, si115x_functions.o(i.Si115xParamSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = Si115xParamSet &rArr; _waitUntilSleep &rArr; Si115xReadFromRegister &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___18_si115x_functions_c_571b282e__nrf_delay_us
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_waitUntilSleep
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si115xReadFromRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrm_read_cmd
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si1153_Init
</UL>

<P><STRONG><a name="[bf]"></a>Si115xReadFromRegister</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, si115x_functions.o(i.Si115xReadFromRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = Si115xReadFromRegister &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_rx
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___18_si115x_functions_c_571b282e__nrf_delay_us
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si115xParamSet
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_waitUntilSleep
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b8]"></a>Si115xReset</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, si115x_functions.o(i.Si115xReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = Si115xReset &rArr; Si115xWriteToRegister &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si115xWriteToRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si1153_Init
</UL>

<P><STRONG><a name="[c2]"></a>Si115xWriteToRegister</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, si115x_functions.o(i.Si115xWriteToRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = Si115xWriteToRegister &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___18_si115x_functions_c_571b282e__nrf_delay_us
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si115xReset
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[31]"></a>SystemInit</STRONG> (Thumb, 678 bytes, Stack size 24 bytes, system_nrf52.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(.text)
</UL>
<P><STRONG><a name="[d]"></a>UARTE0_UART0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.UARTE0_UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UARTE0_UART0_IRQHandler &rArr; uart_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>WDT_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrf_drv_wdt.o(i.WDT_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[c6]"></a>__0sprintf$8</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[299]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[1c6]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;form_version_strings
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
</UL>

<P><STRONG><a name="[d4]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[c8]"></a>__hardfp_cos</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, cos.o(i.__hardfp_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrs_butterworth_bpf_init
</UL>

<P><STRONG><a name="[cf]"></a>__hardfp_sin</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, sin.o(i.__hardfp_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrs_butterworth_bpf_init
</UL>

<P><STRONG><a name="[d0]"></a>__hardfp_tan</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, tan.o(i.__hardfp_tan))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = __hardfp_tan &rArr; __kernel_tan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrs_butterworth_bpf_init
</UL>

<P><STRONG><a name="[cc]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 938 bytes, Stack size 120 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[ce]"></a>__kernel_cos</STRONG> (Thumb, 322 bytes, Stack size 64 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[d3]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[cd]"></a>__kernel_sin</STRONG> (Thumb, 280 bytes, Stack size 72 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[d1]"></a>__kernel_tan</STRONG> (Thumb, 764 bytes, Stack size 128 bytes, tan_i.o(i.__kernel_tan))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = __kernel_tan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
</UL>

<P><STRONG><a name="[cb]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[ca]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[d5]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[29a]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[29b]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[29c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[c9]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[1f6]"></a>accel_save_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lsm6ds3.o(i.accel_save_init))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_init
</UL>

<P><STRONG><a name="[d8]"></a>accum_3axis_data</STRONG> (Thumb, 282 bytes, Stack size 40 bytes, reports.o(i.accum_3axis_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 2072<LI>Call Chain = accum_3axis_data &rArr; buffer_record &rArr; add_record &rArr; load_output_buffer &rArr; inform_rec_tranceived &rArr;  load_output_buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_unix_time
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_fields
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_record
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_reporters
</UL>

<P><STRONG><a name="[dc]"></a>accum_step_per_time</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, reports.o(i.accum_step_per_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = accum_step_per_time &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_unix_time
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_reporters
</UL>

<P><STRONG><a name="[47]"></a>add_accel_buffer</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, hal_imu.o(i.add_accel_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = add_accel_buffer &rArr; calc_magnitude &rArr; fast_sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_magnitude
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_imu.o(i.imu_init)
</UL>
<P><STRONG><a name="[46]"></a>add_gyro_buffer</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, hal_imu.o(i.add_gyro_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = add_gyro_buffer &rArr; calc_magnitude &rArr; fast_sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_magnitude
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_imu.o(i.imu_init)
</UL>
<P><STRONG><a name="[de]"></a>add_record</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, mem_manager.o(i.add_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 2008<LI>Call Chain = add_record &rArr; load_output_buffer &rArr; inform_rec_tranceived &rArr;  load_output_buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_buffered_recs
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_report_length
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_output_buffer
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_record
</UL>

<P><STRONG><a name="[e2]"></a>adv_data_encode</STRONG> (Thumb, 514 bytes, Stack size 48 bytes, ble_advdata.o(i.adv_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_encode
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_role_encode
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_device_addr_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
</UL>

<P><STRONG><a name="[ef]"></a>app_error_fault_handler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(i.app_error_fault_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = app_error_fault_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_fault_handler
</UL>

<P><STRONG><a name="[b3]"></a>app_error_handler_bare</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, app_error.o(i.app_error_handler_bare))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = app_error_handler_bare &rArr; app_error_fault_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_id_encode
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnp_id_encode
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_add
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si115xParamSet
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si115xWriteToRegister
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si115xReadFromRegister
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si1153_twi_init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminate_connection
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timers_init
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_evt
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_manager_init
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_manager_evt_handler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_error_handler
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_update
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_stop
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_pstorage_cb_handler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intern_softdevice_events_execute
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_EGU2_IRQHandler
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_check_timer
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_timer_stop
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spim_xfer
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spim_init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_update_status
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_monitor_stop
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_monitor_start
</UL>

<P><STRONG><a name="[95]"></a>app_get_debug_priority</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_trace.o(i.app_get_debug_priority))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_access_in_progress
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_self_test
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reporter
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rec_ack_req
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inform_rec_tranceived
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_record
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_reporters
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secure_connect_sm
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_packet
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetize_record
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_transfer_packets
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_config
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_hardware
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_imu
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_init
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_msg
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_flash_timer_handler
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mem_manager
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_slp_check
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_power_state
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_twim_init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_hw_init_error
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_motion_wakeup
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_register
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_device_delete_all
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detach_handler
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_reporters
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_send_nus_data
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_on_ble_evt
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_shutoff
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_event_handler
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminate_connection
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_key_ring
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_imu
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_calendar_events
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indicate_battery_state
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;form_version_strings
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_control_data_handler
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_all_bonds
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uart_tx
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timers_init
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_evt_dispatch
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_evt
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_manager_evt_handler
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_imu
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_update
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_stop
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_load
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bond_data_load
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_instance_init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;no_service_context_store
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;no_service_context_load
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;no_service_context_apply
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattsc_context_store
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattsc_context_load
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattsc_context_apply
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_context_store
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_context_load
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_context_apply
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_context_store
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_context_load
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_context_apply
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_pstorage_cb_handler
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_instance_free
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_instance_find
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_instance_allocate
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_context_store
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_instance_init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_instance_allocate
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_evt_notify
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_api_err_code_process
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_queue_element_consume
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_magnet
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_gyro
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_accel
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_run_self_test
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_init_sensors
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_fifo_management
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_enable_sensors
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_disable_all
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_check_wom
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_check_wakeup_evt
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_set_fifo_decimators_and_threshold
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_self_test
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_read_fifo
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_twim_write
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_twim_read
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_i2c_write
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_i2c_read
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_timer_handler
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_buffered_recs
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_record
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_reporters
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_report_length
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_report_length
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ave_accel_data
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accum_step_per_time
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accum_3axis_data
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_record
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrs_butterworth_filter
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepStateMachine_2
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_handler
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_busy
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_raw_data_sync
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_gyro
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_compass
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_gyro
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_compass
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_accel
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_stop_flash_timer
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_start_flash_timer
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_config_cb
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ext_flash
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_store_log
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_copy_log
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_config_update
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_clear_log_page
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_clear_log_block
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_discard_tail_page
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_tail
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_log
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_head
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_log_len
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_store_data
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_retrieve_rec
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_mark_rec_sent
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_log_memory_check
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init_non_volatile_mem
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_erase_tail_block
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manufacture_connection_settings
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_output_buffer
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_sanity_check
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_wakeup
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_sector_protection
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_read
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_page_erase
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_erase_4k_block
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_deep_power_down
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_byte_page_write
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFLASH_RELEASE
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFLASH_LOCK
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sm
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_complete_cb
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_check_timer
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_xfer
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_read_status
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_global_protect
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protect_sm
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_sm
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_timer_cb
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_timer_stop
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spim_xfer
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spim_init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq25120_write_data_with_mask
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq25120_i2c_read
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq25120_read_status
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq25120_init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_update_status
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_adc_callback
</UL>

<P><STRONG><a name="[235]"></a>app_set_min_debug_priority</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, app_trace.o(i.app_set_min_debug_priority))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[103]"></a>app_timer_create</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_timer.o(i.app_timer_create))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_init
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timers_init
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_init
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spim_init
</UL>

<P><STRONG><a name="[f1]"></a>app_timer_init</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, app_timer.o(i.app_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = app_timer_init &rArr; rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timers_init
</UL>

<P><STRONG><a name="[21e]"></a>app_timer_is_valid</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_timer.o(i.app_timer_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_stop_flash_timer
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_start_flash_timer
</UL>

<P><STRONG><a name="[f6]"></a>app_timer_start</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, app_timer.o(i.app_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_id_get
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secure_connect_sm
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_new_comms
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timers_init
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_start_flash_timer
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_check_timer
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spim_xfer
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_update_status
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_reading_sm
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_monitor_start
</UL>

<P><STRONG><a name="[fa]"></a>app_timer_stop</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, app_timer.o(i.app_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_id_get
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secure_connect_sm
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_new_comms
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_stop_flash_timer
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_timer_stop
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_update_status
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_monitor_stop
</UL>

<P><STRONG><a name="[fb]"></a>app_trace_dump</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, app_trace.o(i.app_trace_dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = app_trace_dump &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_write_string
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_context_store
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_context_load
</UL>

<P><STRONG><a name="[fc]"></a>app_trace_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_trace.o(i.app_trace_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = app_trace_init &rArr; log_rtt_init &rArr; SEGGER_RTT_ConfigUpBuffer &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[142]"></a>app_util_critical_region_enter</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, app_util_platform.o(i.app_util_critical_region_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_packet
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_transfer_packets
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_wdt_channel_alloc
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_alloc
</UL>

<P><STRONG><a name="[144]"></a>app_util_critical_region_exit</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, app_util_platform.o(i.app_util_critical_region_exit))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_packet
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_transfer_packets
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_wdt_channel_alloc
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_alloc
</UL>

<P><STRONG><a name="[fe]"></a>ave_accel_data</STRONG> (Thumb, 524 bytes, Stack size 40 bytes, reports.o(i.ave_accel_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ave_accel_data &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_unix_time
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_reporters
</UL>

<P><STRONG><a name="[245]"></a>battery_chr_present</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, battery.o(i.battery_chr_present))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[161]"></a>battery_get_level</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, battery.o(i.battery_get_level))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_reporters
</UL>

<P><STRONG><a name="[15f]"></a>battery_get_voltage</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, battery.o(i.battery_get_voltage))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_reporters
</UL>

<P><STRONG><a name="[102]"></a>battery_init</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, battery.o(i.battery_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = battery_init &rArr; battery_update_status &rArr; bq25120_read_status &rArr; bq2510_reg_defaults &rArr; bq25120_write_data_with_mask &rArr; bq25120_i2c_read &rArr; hal_twim_read &rArr; twim_busy &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_write_string
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_enable
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_alloc
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_channel_init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_buffer_convert
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq25120_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___9_battery_c_00816f10__nrf_delay_us
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_update_status
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_reading_sm
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_monitor_start
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[23b]"></a>battery_isdav</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, battery.o(i.battery_isdav))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15e]"></a>battery_level_change</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, battery.o(i.battery_level_change))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_reporters
</UL>

<P><STRONG><a name="[112]"></a>battery_report</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, battery.o(i.battery_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = battery_report &rArr; battery_update_status &rArr; bq25120_read_status &rArr; bq2510_reg_defaults &rArr; bq25120_write_data_with_mask &rArr; bq25120_i2c_read &rArr; hal_twim_read &rArr; twim_busy &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_update_status
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[113]"></a>battery_self_test</STRONG> (Thumb, 318 bytes, Stack size 16 bytes, battery.o(i.battery_self_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = battery_self_test &rArr; battery_update_status &rArr; bq25120_read_status &rArr; bq2510_reg_defaults &rArr; bq25120_write_data_with_mask &rArr; bq25120_i2c_read &rArr; hal_twim_read &rArr; twim_busy &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_write_string
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq25120_charge_disable
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_update_status
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_reading_sm
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_monitor_stop
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_monitor_start
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_enable_charging
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_hardware
</UL>

<P><STRONG><a name="[114]"></a>battery_shutoff</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, battery.o(i.battery_shutoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = battery_shutoff &rArr; bq25120_en_shipmode &rArr; bq25120_write_data_with_mask &rArr; bq25120_i2c_read &rArr; hal_twim_read &rArr; twim_busy &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq25120_en_shipmode
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[119]"></a>ble_advdata_set</STRONG> (Thumb, 104 bytes, Stack size 96 bytes, ble_advdata.o(i.ble_advdata_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
</UL>

<P><STRONG><a name="[ed]"></a>ble_advertising_init</STRONG> (Thumb, 274 bytes, Stack size 16 bytes, ble_advertising.o(i.ble_advertising_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ble_advertising_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_peer_address_clear
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
</UL>

<P><STRONG><a name="[11c]"></a>ble_advertising_start</STRONG> (Thumb, 604 bytes, Stack size 64 bytes, ble_advertising.o(i.ble_advertising_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ble_advertising_start &rArr; flash_access_in_progress &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whitelist_has_entries
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_address_exists
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_access_in_progress
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_peer_address_clear
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[124]"></a>ble_bas_battery_level_update</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, ble_vsp_bas.o(i.ble_bas_battery_level_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_bas_battery_level_update
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_update
</UL>

<P><STRONG><a name="[125]"></a>ble_bas_battery_state_update</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, ble_vsp_bas.o(i.ble_bas_battery_state_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_bas_battery_state_update
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_update
</UL>

<P><STRONG><a name="[120]"></a>ble_bas_init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ble_vsp_bas.o(i.ble_bas_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ble_bas_init &rArr; battery_state_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_state_char_add
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_level_char_add
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[121]"></a>ble_bas_on_ble_evt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ble_vsp_bas.o(i.ble_bas_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_bas_on_ble_evt &rArr; on_write
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[126]"></a>ble_conn_params_init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ble_conn_params.o(i.ble_conn_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_conn_params_init
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[127]"></a>ble_conn_params_on_ble_evt</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, ble_conn_params.o(i.ble_conn_params_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_conn_params_on_ble_evt &rArr; conn_params_negotiation &rArr; app_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[129]"></a>ble_dis_init</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, ble_dis.o(i.ble_dis_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = ble_dis_init &rArr; char_add &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_id_encode
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnp_id_encode
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_add
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[130]"></a>ble_nus_init</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, ble_nus.o(i.ble_nus_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ble_nus_init &rArr; tx_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_char_add
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_char_add
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[12e]"></a>ble_nus_on_ble_evt</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, ble_nus.o(i.ble_nus_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ble_nus_on_ble_evt &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[147]"></a>ble_nus_string_send</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, ble_nus.o(i.ble_nus_string_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_nus_string_send
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uart_tx
</UL>

<P><STRONG><a name="[133]"></a>ble_send_nus_data</STRONG> (Thumb, 486 bytes, Stack size 56 bytes, comms.o(i.ble_send_nus_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 2608<LI>Call Chain = ble_send_nus_data &rArr; packetize_record &rArr; get_next_record &rArr; load_output_buffer &rArr; inform_rec_tranceived &rArr;  load_output_buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_remote_console
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inform_rec_tranceived
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_log_empty
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_packet
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetize_record
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_transfer_packets
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_write_string
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSystemTimeMs
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13a]"></a>ble_srv_ascii_to_utf8</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ble_srv_common.o(i.ble_srv_ascii_to_utf8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_srv_ascii_to_utf8
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[110]"></a>ble_srv_report_ref_encode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_srv_common.o(i.ble_srv_report_ref_encode))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_state_char_add
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_level_char_add
</UL>

<P><STRONG><a name="[146]"></a>ble_transfer_packets_wrapper</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, comms.o(i.ble_transfer_packets_wrapper))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ble_transfer_packets_wrapper &rArr; ble_transfer_packets &rArr; ble_uart_tx &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_transfer_packets
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[143]"></a>ble_uart_tx</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(i.ble_uart_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ble_uart_tx &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_string_send
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_transfer_packets
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_msg
</UL>

<P><STRONG><a name="[148]"></a>bond_data_load</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, vsp_device_manager_peripheral.o(i.bond_data_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = bond_data_load &rArr; pstorage_load &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_load
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_block_identifier_get
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
</UL>

<P><STRONG><a name="[101]"></a>bq25120_charge_disable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bq25120.o(i.bq25120_charge_disable))
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_self_test
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq25120_init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq25120_en_shipmode
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_enable_charging
</UL>

<P><STRONG><a name="[118]"></a>bq25120_charger_connected</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bq25120.o(i.bq25120_charger_connected))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_update_status
</UL>

<P><STRONG><a name="[115]"></a>bq25120_en_shipmode</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bq25120.o(i.bq25120_en_shipmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = bq25120_en_shipmode &rArr; bq25120_write_data_with_mask &rArr; bq25120_i2c_read &rArr; hal_twim_read &rArr; twim_busy &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq25120_i2c_wakeup
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___9_bq25120_c_a722ed14__nrf_delay_us
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq25120_write_data_with_mask
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq25120_i2c_idle
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq25120_charge_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_shutoff
</UL>

<P><STRONG><a name="[14f]"></a>bq25120_i2c_wakeup</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bq25120.o(i.bq25120_i2c_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bq25120_i2c_wakeup
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq25120_read_status
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq25120_init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq25120_en_shipmode
</UL>

<P><STRONG><a name="[105]"></a>bq25120_init</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, bq25120.o(i.bq25120_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = bq25120_init &rArr; bq2510_reg_defaults &rArr; bq25120_write_data_with_mask &rArr; bq25120_i2c_read &rArr; hal_twim_read &rArr; twim_busy &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_write_string
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq25120_i2c_wakeup
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___9_bq25120_c_a722ed14__nrf_delay_us
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq25120_i2c_read
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq2510_reg_defaults
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq25120_charge_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_init
</UL>

<P><STRONG><a name="[117]"></a>bq25120_read_status</STRONG> (Thumb, 608 bytes, Stack size 48 bytes, bq25120.o(i.bq25120_read_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = bq25120_read_status &rArr; bq2510_reg_defaults &rArr; bq25120_write_data_with_mask &rArr; bq25120_i2c_read &rArr; hal_twim_read &rArr; twim_busy &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_write_string
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSystemTimeMs
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq25120_i2c_wakeup
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___9_bq25120_c_a722ed14__nrf_delay_us
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq25120_i2c_read
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq25120_i2c_idle
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq2510_reg_defaults
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_update_status
</UL>

<P><STRONG><a name="[154]"></a>calc_linear_accel</STRONG> (Thumb, 716 bytes, Stack size 40 bytes, data_crunch.o(i.calc_linear_accel))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = calc_linear_accel &rArr; calc_magnitude &rArr; fast_sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_magnitude
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_en
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motionAnalyze
</UL>

<P><STRONG><a name="[dd]"></a>calc_magnitude</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, data_crunch.o(i.calc_magnitude))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = calc_magnitude &rArr; fast_sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_linear_accel
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_gyro_buffer
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_accel_buffer
</UL>

<P><STRONG><a name="[158]"></a>calc_rotation_coeffecients</STRONG> (Thumb, 358 bytes, Stack size 104 bytes, data_crunch.o(i.calc_rotation_coeffecients))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = calc_rotation_coeffecients &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_fsr
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_sens
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_motion_analysis
</UL>

<P><STRONG><a name="[15b]"></a>check_reporters</STRONG> (Thumb, 788 bytes, Stack size 48 bytes, reports.o(i.check_reporters))
<BR><BR>[Stack]<UL><LI>Max Depth = 2152<LI>Call Chain = check_reporters &rArr; enable_reporters &rArr; buffer_record &rArr; add_record &rArr; load_output_buffer &rArr; inform_rec_tranceived &rArr;  load_output_buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_reporters
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_unix_time
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSystemTimeMs
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reporter_update_cmplt
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_level_change
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_get_voltage
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_get_level
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_fields
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ave_accel_data
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accum_step_per_time
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accum_3axis_data
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_record
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_en
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_calendar_events
</UL>

<P><STRONG><a name="[162]"></a>check_sample_rate</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, data_crunch.o(i.check_sample_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = check_sample_rate
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_sample_rate
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_motion_analysis
</UL>

<P><STRONG><a name="[16a]"></a>collect_imu_data</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_imu.o(i.collect_imu_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912<LI>Call Chain = collect_imu_data &rArr; lsm6ds3_fifo_management &rArr; lsm6ds3_read_fifo &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_fifo_management
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_imu
</UL>

<P><STRONG><a name="[180]"></a>cyclic_motion_monitor</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, data_crunch.o(i.cyclic_motion_monitor))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = cyclic_motion_monitor &rArr; stepStateMachine_2 &rArr; mrs_butterworth_filter &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepStateMachine_2
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_sens
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motionAnalyze
</UL>

<P><STRONG><a name="[137]"></a>data_log_empty</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mem_manager.o(i.data_log_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = data_log_empty &rArr; nv_storage_empty &rArr; hal_unsent_log_len &rArr; calc_log_len &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nv_storage_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_send_nus_data
</UL>

<P><STRONG><a name="[186]"></a>dec_report_length</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, reports.o(i.dec_report_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = dec_report_length &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_write_string
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inform_rec_tranceived
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_removed
</UL>

<P><STRONG><a name="[187]"></a>delete_all_bonds</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, main.o(i.delete_all_bonds))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = delete_all_bonds &rArr; dm_device_delete_all &rArr; device_instance_free &rArr; pstorage_clear &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; clear_operation_execute &rArr; sm_state_change &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config_update_flag
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_write_string
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_device_delete_all
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_msg
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18a]"></a>delete_tail_block</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mem_manager.o(i.delete_tail_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = delete_tail_block &rArr; hal_erase_tail_block &rArr; ext_clear_log_block &rArr; spiflash_erase_4k_block &rArr; erase_sm &rArr; spiflash_address_command &rArr; spiflash_xfer &rArr; hal_spim_xfer &rArr; spim_xfer &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_unsent_log_len
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_erase_tail_block
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[53]"></a>detach_handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, comms.o(i.detach_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = detach_handler &rArr; terminate_connection &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_write_string
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminate_connection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.timers_init)
</UL>
<P><STRONG><a name="[94]"></a>detect_peak</STRONG> (Thumb, 330 bytes, Stack size 64 bytes, si115x_functions.o(i.detect_peak))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = detect_peak &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HRMs
</UL>

<P><STRONG><a name="[4a]"></a>dfu_control_data_handler</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, main.o(i.dfu_control_data_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = dfu_control_data_handler &rArr; terminate_connection &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secure_connection
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_write_string
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminate_connection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.services_init)
</UL>
<P><STRONG><a name="[12d]"></a>dm_ble_evt_handler</STRONG> (Thumb, 2050 bytes, Stack size 104 bytes, vsp_device_manager_peripheral.o(i.dm_ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = dm_ble_evt_handler &rArr; device_instance_allocate &rArr; device_instance_free &rArr; pstorage_clear &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; clear_operation_execute &rArr; sm_state_change &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_trace_dump
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_handle_initialize
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bond_data_load
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_instance_init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_instance_free
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_instance_find
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_instance_allocate
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_context_store
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_instance_init
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_instance_find
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_instance_allocate
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_evt_notify
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[188]"></a>dm_device_delete_all</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, vsp_device_manager_peripheral.o(i.dm_device_delete_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = dm_device_delete_all &rArr; device_instance_free &rArr; pstorage_clear &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; clear_operation_execute &rArr; sm_state_change &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_instance_free
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_all_bonds
</UL>

<P><STRONG><a name="[19d]"></a>dm_handle_initialize</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, vsp_device_manager_peripheral.o(i.dm_handle_initialize))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_pstorage_cb_handler
</UL>

<P><STRONG><a name="[19a]"></a>dm_init</STRONG> (Thumb, 418 bytes, Stack size 64 bytes, vsp_device_manager_peripheral.o(i.dm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = dm_init &rArr; pstorage_clear &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; clear_operation_execute &rArr; sm_state_change &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_register
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_load
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_clear
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_block_identifier_get
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_instance_init
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_instance_init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_manager_init
</UL>

<P><STRONG><a name="[19b]"></a>dm_register</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, vsp_device_manager_peripheral.o(i.dm_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = dm_register &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_manager_init
</UL>

<P><STRONG><a name="[1a0]"></a>enable_motion_wakeup</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hal_imu.o(i.enable_motion_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = enable_motion_wakeup &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_wake_on_motion
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_slp_check
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_power_state
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_imu
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15c]"></a>enable_reporters</STRONG> (Thumb, 1096 bytes, Stack size 72 bytes, reports.o(i.enable_reporters))
<BR><BR>[Stack]<UL><LI>Max Depth = 2104<LI>Call Chain = enable_reporters &rArr; buffer_record &rArr; add_record &rArr; load_output_buffer &rArr; inform_rec_tranceived &rArr;  load_output_buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_unix_time
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSystemTimeMs
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_record
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_gyro_on
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_gyro_off
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_compass_on
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_compass_off
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_accel_on
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_accel_off
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_msg
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_reporter_config
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_reporters
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_reporters
</UL>

<P><STRONG><a name="[1a8]"></a>erase_reporter_config</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, reports.o(i.erase_reporter_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 2120<LI>Call Chain = erase_reporter_config &rArr; enable_reporters &rArr; buffer_record &rArr; add_record &rArr; load_output_buffer &rArr; inform_rec_tranceived &rArr;  load_output_buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reporter
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_reporters
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_msg
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1af]"></a>ext_clear_log_block</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, ext_flash.o(i.ext_clear_log_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = ext_clear_log_block &rArr; spiflash_erase_4k_block &rArr; erase_sm &rArr; spiflash_address_command &rArr; spiflash_xfer &rArr; hal_spim_xfer &rArr; spim_xfer &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSystemTimeMs
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_wakeup
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_erase_4k_block
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_deep_power_down
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_erase_tail_block
</UL>

<P><STRONG><a name="[1b3]"></a>ext_clear_log_page</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, ext_flash.o(i.ext_clear_log_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = ext_clear_log_page &rArr; spiflash_page_erase &rArr; erase_sm &rArr; spiflash_address_command &rArr; spiflash_xfer &rArr; hal_spim_xfer &rArr; spim_xfer &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSystemTimeMs
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_wakeup
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_page_erase
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_deep_power_down
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_discard_tail_page
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_log
</UL>

<P><STRONG><a name="[1b5]"></a>ext_config_update</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, ext_flash.o(i.ext_config_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = ext_config_update &rArr; update_config_cb &rArr; spiflash_byte_page_write &rArr; write_sm &rArr; spiflash_write_data &rArr; spiflash_xfer &rArr; hal_spim_xfer &rArr; spim_xfer &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_write_string
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_config_cb
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFLASH_LOCK
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_update_config
</UL>

<P><STRONG><a name="[17f]"></a>ext_copy_log</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, ext_flash.o(i.ext_copy_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = ext_copy_log &rArr; spiflash_read &rArr; spiflash_address_command &rArr; spiflash_xfer &rArr; hal_spim_xfer &rArr; spim_xfer &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSystemTimeMs
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_wakeup
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_read
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_deep_power_down
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_nvm
</UL>

<P><STRONG><a name="[1b7]"></a>ext_store_log</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, ext_flash.o(i.ext_store_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = ext_store_log &rArr; spiflash_byte_page_write &rArr; write_sm &rArr; spiflash_write_data &rArr; spiflash_xfer &rArr; hal_spim_xfer &rArr; spim_xfer &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSystemTimeMs
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_wakeup
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_deep_power_down
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_byte_page_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_log
</UL>

<P><STRONG><a name="[d2]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[157]"></a>fast_sqrt</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, data_crunch.o(i.fast_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fast_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepStateMachine_2
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_magnitude
</UL>

<P><STRONG><a name="[1b9]"></a>flag_hw_init_error</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, manufacture_test.o(i.flag_hw_init_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = flag_hw_init_error &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ba]"></a>flag_new_comms</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, comms.o(i.flag_new_comms))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = flag_new_comms &rArr; app_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_queue
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manufacture_mode
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
</UL>

<P><STRONG><a name="[1bc]"></a>flag_raw_data_sync</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, reports.o(i.flag_raw_data_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = flag_raw_data_sync &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSystemTimeMs
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_power_state
</UL>

<P><STRONG><a name="[1e1]"></a>force_word_aligned</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mem_manager.o(i.force_word_aligned))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_tail
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_head
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_store_data
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_retrieve_rec
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_log_memory_check
</UL>

<P><STRONG><a name="[1c5]"></a>form_version_strings</STRONG> (Thumb, 192 bytes, Stack size 80 bytes, main.o(i.form_version_strings))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = form_version_strings &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f2]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_twim_xfer
</UL>

<P><STRONG><a name="[1be]"></a>fs_queued_op_count_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fstorage.o(i.fs_queued_op_count_get))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_access_in_progress
</UL>

<P><STRONG><a name="[ad]"></a>getSystemTimeMs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.getSystemTimeMs))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_reporters
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_config
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_msg
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_power_state
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_reporters
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_send_nus_data
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_self_test
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_twim_write
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_twim_read
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_timer_handler
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_busy
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_twim_xfer
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_raw_data_sync
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keep_gyro_on
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keep_accel_on
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_stop_flash_timer
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_start_flash_timer
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_config_cb
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_store_log
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_copy_log
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_clear_log_page
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_clear_log_block
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_log
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_store_data
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_retrieve_rec
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_output_buffer
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFLASH_LOCK
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sm
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_check_timer
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protect_sm
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_sm
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_timer_cb
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_timer_stop
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spim_xfer
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq25120_read_status
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_update_status
</UL>

<P><STRONG><a name="[15d]"></a>get_accel_en</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hal_imu.o(i.get_accel_en))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_accel_en
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_active_sensors
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_reporters
</UL>

<P><STRONG><a name="[1c9]"></a>get_accel_fsr</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hal_imu.o(i.get_accel_fsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_accel_fsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_get_accel_fsr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_accel
</UL>

<P><STRONG><a name="[163]"></a>get_accel_sample_rate</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_imu.o(i.get_accel_sample_rate))
<BR><BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_get_accel_samp
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reporter
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initStepDetect_2
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sample_rate
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_accel
</UL>

<P><STRONG><a name="[15a]"></a>get_accel_sens</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_imu.o(i.get_accel_sens))
<BR><BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_get_accel_sens
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initStepDetect_2
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initStepDetect_1
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyclic_motion_monitor
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_rotation_coeffecients
</UL>

<P><STRONG><a name="[263]"></a>get_active_reporters</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, reports.o(i.get_active_reporters))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_msg
</UL>

<P><STRONG><a name="[26f]"></a>get_compass_sample_rate</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_imu.o(i.get_compass_sample_rate))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reporter
</UL>

<P><STRONG><a name="[23f]"></a>get_config_update_flag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mem_manager.o(i.get_config_update_flag))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[155]"></a>get_gyro_en</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hal_imu.o(i.get_gyro_en))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_gyro_en
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_active_sensors
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_linear_accel
</UL>

<P><STRONG><a name="[159]"></a>get_gyro_fsr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_imu.o(i.get_gyro_fsr))
<BR><BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_get_gyro_fsr
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_rotation_coeffecients
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_gyro
</UL>

<P><STRONG><a name="[1cf]"></a>get_gyro_sample_rate</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_imu.o(i.get_gyro_sample_rate))
<BR><BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_get_gyro_samp
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reporter
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_gyro
</UL>

<P><STRONG><a name="[23c]"></a>get_hw_test_flags</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, manufacture_test.o(i.get_hw_test_flags))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[243]"></a>get_hw_test_request</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, manufacture_test.o(i.get_hw_test_request))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[269]"></a>get_hw_test_status</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, manufacture_test.o(i.get_hw_test_status))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_msg
</UL>

<P><STRONG><a name="[1d1]"></a>get_log_region_size</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mem_manager.o(i.get_log_region_size))
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_log_region_size
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reporter
</UL>

<P><STRONG><a name="[1d3]"></a>get_next_record</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, mem_manager.o(i.get_next_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 2000<LI>Call Chain = get_next_record &rArr; load_output_buffer &rArr; inform_rec_tranceived &rArr;  load_output_buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_output_buffer
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetize_record
</UL>

<P><STRONG><a name="[205]"></a>get_read_buf_ptr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spiflash.o(i.get_read_buf_ptr))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ext_flash
</UL>

<P><STRONG><a name="[20a]"></a>get_total_record_cnt</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, reports.o(i.get_total_record_cnt))
<BR><BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;records_byte_cnt
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_msg
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mem_manager
</UL>

<P><STRONG><a name="[d9]"></a>get_unix_time</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.get_unix_time))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_reporters
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_msg
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_reporters
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ave_accel_data
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accum_step_per_time
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accum_3axis_data
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepStateMachine_2
</UL>

<P><STRONG><a name="[1f5]"></a>gyro_save_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lsm6ds3.o(i.gyro_save_init))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_init
</UL>

<P><STRONG><a name="[1da]"></a>hal_discard_tail_page</STRONG> (Thumb, 184 bytes, Stack size 536 bytes, hal_nvm.o(i.hal_discard_tail_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = hal_discard_tail_page &rArr; hal_retrieve_rec &rArr; copy_nvm &rArr; ext_copy_log &rArr; spiflash_read &rArr; spiflash_address_command &rArr; spiflash_xfer &rArr; hal_spim_xfer &rArr; spim_xfer &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_clear_log_page
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_tail
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_unsent_log_len
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_retrieve_rec
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_removed
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_store_data
</UL>

<P><STRONG><a name="[18c]"></a>hal_erase_tail_block</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, hal_nvm.o(i.hal_erase_tail_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = hal_erase_tail_block &rArr; ext_clear_log_block &rArr; spiflash_erase_4k_block &rArr; erase_sm &rArr; spiflash_address_command &rArr; spiflash_xfer &rArr; hal_spim_xfer &rArr; spim_xfer &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_clear_log_block
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_tail
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_unsent_log_len
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_tail_block
</UL>

<P><STRONG><a name="[1de]"></a>hal_init_non_volatile_mem</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hal_nvm.o(i.hal_init_non_volatile_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = hal_init_non_volatile_mem &rArr; init_ext_flash &rArr; spiflash_sector_protection &rArr; protect_sm &rArr; spiflash_address_command &rArr; spiflash_xfer &rArr; hal_spim_xfer &rArr; spim_xfer &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ext_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mem_manager
</UL>

<P><STRONG><a name="[1e0]"></a>hal_log_memory_check</STRONG> (Thumb, 1684 bytes, Stack size 584 bytes, hal_nvm.o(i.hal_log_memory_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 1952<LI>Call Chain = hal_log_memory_check &rArr; update_log &rArr; ext_store_log &rArr; spiflash_byte_page_write &rArr; write_sm &rArr; spiflash_write_data &rArr; spiflash_xfer &rArr; hal_spim_xfer &rArr; spim_xfer &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_log
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_nvm
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_log_len
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_added
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;force_word_aligned
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mem_manager
</UL>

<P><STRONG><a name="[1d2]"></a>hal_log_region_size</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_nvm.o(i.hal_log_region_size))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_log_region_size
</UL>

<P><STRONG><a name="[1e4]"></a>hal_mark_rec_sent</STRONG> (Thumb, 282 bytes, Stack size 56 bytes, hal_nvm.o(i.hal_mark_rec_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424<LI>Call Chain = hal_mark_rec_sent &rArr; update_log &rArr; ext_store_log &rArr; spiflash_byte_page_write &rArr; write_sm &rArr; spiflash_write_data &rArr; spiflash_xfer &rArr; hal_spim_xfer &rArr; spim_xfer &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_tail
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_log
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_nvm
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inform_rec_tranceived
</UL>

<P><STRONG><a name="[1db]"></a>hal_retrieve_rec</STRONG> (Thumb, 410 bytes, Stack size 312 bytes, hal_nvm.o(i.hal_retrieve_rec))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = hal_retrieve_rec &rArr; copy_nvm &rArr; ext_copy_log &rArr; spiflash_read &rArr; spiflash_address_command &rArr; spiflash_xfer &rArr; hal_spim_xfer &rArr; spim_xfer &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSystemTimeMs
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_tail
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_nvm
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_unsent_log_len
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;force_word_aligned
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_discard_tail_page
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_output_buffer
</UL>

<P><STRONG><a name="[1e5]"></a>hal_spim_init</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, hal_spim.o(i.hal_spim_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = hal_spim_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_init
</UL>

<P><STRONG><a name="[1e7]"></a>hal_spim_xfer</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, hal_spim.o(i.hal_spim_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = hal_spim_xfer &rArr; spim_xfer &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSystemTimeMs
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_repair
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_xfer
</UL>

<P><STRONG><a name="[1ea]"></a>hal_store_data</STRONG> (Thumb, 330 bytes, Stack size 568 bytes, hal_nvm.o(i.hal_store_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 1936<LI>Call Chain = hal_store_data &rArr; hal_discard_tail_page &rArr; hal_retrieve_rec &rArr; copy_nvm &rArr; ext_copy_log &rArr; spiflash_read &rArr; spiflash_address_command &rArr; spiflash_xfer &rArr; hal_spim_xfer &rArr; spim_xfer &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSystemTimeMs
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_discard_tail_page
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_tail
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_log
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_head
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_nvm
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_log_len
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;force_word_aligned
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_buffered_recs
</UL>

<P><STRONG><a name="[170]"></a>hal_twim_init</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, hal_twim.o(i.hal_twim_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = hal_twim_init &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_enable
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_imu
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_imu
</UL>

<P><STRONG><a name="[152]"></a>hal_twim_read</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, hal_twim.o(i.hal_twim_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = hal_twim_read &rArr; twim_busy &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSystemTimeMs
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_busy
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_twim_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_i2c_read
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq25120_i2c_read
</UL>

<P><STRONG><a name="[1ee]"></a>hal_twim_uninit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_twim.o(i.hal_twim_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_twim_uninit &rArr; nrf_drv_twi_uninit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_uninit
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_imu
</UL>

<P><STRONG><a name="[153]"></a>hal_twim_write</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, hal_twim.o(i.hal_twim_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = hal_twim_write &rArr; twim_busy &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSystemTimeMs
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_busy
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_twim_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_i2c_write
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq25120_write_data_with_mask
</UL>

<P><STRONG><a name="[18b]"></a>hal_unsent_log_len</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_nvm.o(i.hal_unsent_log_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = hal_unsent_log_len &rArr; calc_log_len &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_log_len
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;records_byte_cnt
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_tail_block
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_discard_tail_page
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_tail
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_head
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_retrieve_rec
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_erase_tail_block
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nv_storage_empty
</UL>

<P><STRONG><a name="[178]"></a>hal_update_config</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hal_nvm.o(i.hal_update_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = hal_update_config &rArr; ext_config_update &rArr; update_config_cb &rArr; spiflash_byte_page_write &rArr; write_sm &rArr; spiflash_write_data &rArr; spiflash_xfer &rArr; hal_spim_xfer &rArr; spim_xfer &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_config_update
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_config
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_sanity_check
</UL>

<P><STRONG><a name="[1f3]"></a>hrm_read_cmd</STRONG> (Thumb, 350 bytes, Stack size 16 bytes, si115x_functions.o(i.hrm_read_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = hrm_read_cmd &rArr; Si115xParamSet &rArr; _waitUntilSleep &rArr; Si115xReadFromRegister &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si115xParamSet
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIRLEDAnode
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[172]"></a>imu_init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, hal_imu.o(i.imu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1944<LI>Call Chain = imu_init &rArr; lsm6ds3_init_sensors &rArr; lsm6ds3_reconfigure_fifo &rArr; lsm6ds3_read_fifo &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_init_sensors
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_save_init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_save_init
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_imu
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_imu
</UL>

<P><STRONG><a name="[1f7]"></a>imu_power_state</STRONG> (Thumb, 590 bytes, Stack size 40 bytes, hal_imu.o(i.imu_power_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 1992<LI>Call Chain = imu_power_state &rArr; stop_gyro &rArr; lsm6ds3_disable_sensors &rArr; lsm6ds3_reconfigure_fifo &rArr; lsm6ds3_read_fifo &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_slp_check
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_motion_wakeup
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSystemTimeMs
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_active_axes
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_check_wakeup_evt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_raw_data_sync
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_gyro
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_compass
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_gyro
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_compass
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_accel
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keep_accel_on
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_imu
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_accel
</UL>

<P><STRONG><a name="[1fb]"></a>imu_slp_check</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, hal_imu.o(i.imu_slp_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = imu_slp_check &rArr; lsm6ds3_check_wom &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_motion_wakeup
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_check_wom
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_power_state
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_imu
</UL>

<P><STRONG><a name="[e0]"></a>inc_report_length</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, reports.o(i.inc_report_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = inc_report_length &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_record
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_added
</UL>

<P><STRONG><a name="[201]"></a>indicate_battery_state</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, main.o(i.indicate_battery_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = indicate_battery_state &rArr; log_rtt_write_string &rArr; SEGGER_RTT_WriteString &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_write_string
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[139]"></a>inform_rec_tranceived</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, mem_manager.o(i.inform_rec_tranceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448 + In Cycle
<LI>Call Chain = inform_rec_tranceived &rArr;  load_output_buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_report_length
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_mark_rec_sent
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nv_storage_empty
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_output_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_send_nus_data
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_output_buffer
</UL>

<P><STRONG><a name="[202]"></a>initStepDetect_1</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, step_detect_1.o(i.initStepDetect_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = initStepDetect_1
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_sens
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_motion_analysis
</UL>

<P><STRONG><a name="[203]"></a>initStepDetect_2</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, step_detect_2.o(i.initStepDetect_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = initStepDetect_2 &rArr; mrs_butterworth_bpf_init &rArr; __hardfp_tan &rArr; __kernel_tan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrs_butterworth_bpf_init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_sens
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_sample_rate
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_motion_analysis
</UL>

<P><STRONG><a name="[239]"></a>init_comms</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, comms.o(i.init_comms))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1df]"></a>init_ext_flash</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, ext_flash.o(i.init_ext_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = init_ext_flash &rArr; spiflash_sector_protection &rArr; protect_sm &rArr; spiflash_address_command &rArr; spiflash_xfer &rArr; hal_spim_xfer &rArr; spim_xfer &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_sector_protection
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_read
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_deep_power_down
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_read_buf_ptr
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init_non_volatile_mem
</UL>

<P><STRONG><a name="[238]"></a>init_key_ring</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, main.o(i.init_key_ring))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[208]"></a>init_mem_manager</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, mem_manager.o(i.init_mem_manager))
<BR><BR>[Stack]<UL><LI>Max Depth = 2160<LI>Call Chain = init_mem_manager &rArr; init_reporters &rArr; enable_reporters &rArr; buffer_record &rArr; add_record &rArr; load_output_buffer &rArr; inform_rec_tranceived &rArr;  load_output_buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_total_record_cnt
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_reporters
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_log_memory_check
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init_non_volatile_mem
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manufacture_connection_settings
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_output_buffer
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_sanity_check
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[171]"></a>init_motion_analysis</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, data_crunch.o(i.init_motion_analysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = init_motion_analysis &rArr; initStepDetect_2 &rArr; mrs_butterworth_bpf_init &rArr; __hardfp_tan &rArr; __kernel_tan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setStepCnt_2
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setStepCnt_1
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initStepDetect_2
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initStepDetect_1
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sample_rate
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_rotation_coeffecients
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_imu
</UL>

<P><STRONG><a name="[209]"></a>init_reporters</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, reports.o(i.init_reporters))
<BR><BR>[Stack]<UL><LI>Max Depth = 2144<LI>Call Chain = init_reporters &rArr; enable_reporters &rArr; buffer_record &rArr; add_record &rArr; load_output_buffer &rArr; inform_rec_tranceived &rArr;  load_output_buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reporter
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_reporters
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_history_2
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_history_1
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mem_manager
</UL>

<P><STRONG><a name="[b4]"></a>intern_softdevice_events_execute</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, softdevice_handler.o(i.intern_softdevice_events_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = intern_softdevice_events_execute &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_on_soc_event
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_EGU2_IRQHandler
</UL>

<P><STRONG><a name="[1fa]"></a>keep_accel_on</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hal_imu.o(i.keep_accel_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = keep_accel_on
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSystemTimeMs
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_power_state
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepStateMachine_2
</UL>

<P><STRONG><a name="[215]"></a>keep_gyro_on</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hal_imu.o(i.keep_gyro_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = keep_gyro_on
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSystemTimeMs
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepStateMachine_2
</UL>

<P><STRONG><a name="[b6]"></a>led</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, led.o(i.led))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = led &rArr; led_start_flash_timer &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_start_flash_timer
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_control
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetIRLEDAnode
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[54]"></a>led_flash_timer_handler</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, led.o(i.led_flash_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = led_flash_timer_handler &rArr; led_stop_flash_timer &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_write_string
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_stop_flash_timer
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.timers_init)
</UL>
<P><STRONG><a name="[1d9]"></a>led_init</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, led.o(i.led_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = led_init &rArr; log_rtt_write_string &rArr; SEGGER_RTT_WriteString &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_write_string
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_defaults
</UL>

<P><STRONG><a name="[21d]"></a>led_over_ride</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, led.o(i.led_over_ride))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = led_over_ride &rArr; led_start_flash_timer &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_start_flash_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21f]"></a>led_uninit</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, led.o(i.led_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = led_uninit &rArr; led_stop_flash_timer &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_stop_flash_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fd]"></a>log_rtt_init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, nrf_log.o(i.log_rtt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = log_rtt_init &rArr; SEGGER_RTT_ConfigUpBuffer &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_ConfigUpBuffer
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_ConfigDownBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_trace_init
</UL>

<P><STRONG><a name="[96]"></a>log_rtt_printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_log.o(i.log_rtt_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_access_in_progress
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_self_test
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reporter
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inform_rec_tranceived
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_record
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_reporters
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secure_connect_sm
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_packet
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_config
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_hardware
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_imu
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_enable
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_check_ram_start
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_init
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_msg
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mem_manager
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_slp_check
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_power_state
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_twim_init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_hw_init_error
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_motion_wakeup
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_register
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_device_delete_all
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_reporters
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_send_nus_data
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_on_ble_evt
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_shutoff
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_init
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_key_ring
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_imu
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;form_version_strings
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uart_tx
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_evt_dispatch
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_manager_evt_handler
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_imu
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_update
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_load
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_trace_dump
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bond_data_load
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_instance_init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;no_service_context_store
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;no_service_context_load
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;no_service_context_apply
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattsc_context_store
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattsc_context_load
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattsc_context_apply
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_context_store
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_context_load
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_context_apply
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_context_store
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_context_load
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_context_apply
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_pstorage_cb_handler
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_instance_free
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_instance_find
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_instance_allocate
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_context_store
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_instance_init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_instance_allocate
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_evt_notify
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_api_err_code_process
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_queue_element_consume
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_run_self_test
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_init_sensors
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_fifo_management
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_enable_sensors
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_disable_all
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_check_wom
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_check_wakeup_evt
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_self_test
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_read_fifo
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_twim_write
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_twim_read
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_i2c_write
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_i2c_read
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_timer_handler
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_buffered_recs
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_record
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_reporters
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_report_length
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_report_length
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ave_accel_data
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accum_step_per_time
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accum_3axis_data
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_record
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrs_butterworth_filter
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepStateMachine_2
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_handler
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_busy
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_raw_data_sync
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_gyro
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_compass
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_gyro
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_compass
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_accel
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_stop_flash_timer
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_start_flash_timer
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_config_cb
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ext_flash
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_store_log
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_copy_log
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_clear_log_page
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_clear_log_block
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_discard_tail_page
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_tail
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_log
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_head
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_log_len
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_store_data
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_retrieve_rec
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_mark_rec_sent
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_log_memory_check
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init_non_volatile_mem
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_erase_tail_block
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manufacture_connection_settings
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_output_buffer
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_sanity_check
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_wakeup
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_sector_protection
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_read
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_page_erase
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_erase_4k_block
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_deep_power_down
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_byte_page_write
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sm
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_complete_cb
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_check_timer
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_read_status
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_global_protect
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protect_sm
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_sm
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_timer_cb
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_timer_stop
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spim_xfer
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spim_init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq25120_write_data_with_mask
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq25120_i2c_read
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq25120_read_status
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq25120_init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_update_status
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_adc_callback
</UL>

<P><STRONG><a name="[134]"></a>log_rtt_remote_console</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, nrf_log.o(i.log_rtt_remote_console))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = log_rtt_remote_console &rArr; SEGGER_RTT_UpBuffer_Retrieve
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_UpBuffer_Retrieve
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_send_nus_data
</UL>

<P><STRONG><a name="[ae]"></a>log_rtt_write_string</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, nrf_log.o(i.log_rtt_write_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = log_rtt_write_string &rArr; SEGGER_RTT_WriteString &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteString
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_self_test
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rec_ack_req
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secure_connect_sm
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetize_record
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_transfer_packets
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_msg
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_flash_timer_handler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detach_handler
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_send_nus_data
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_event_handler
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminate_connection
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_imu
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_calendar_events
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indicate_battery_state
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_control_data_handler
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_all_bonds
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timers_init
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_evt
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_imu
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_stop
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_trace_dump
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_magnet
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_gyro
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_accel
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_set_fifo_decimators_and_threshold
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_report_length
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepStateMachine_2
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_stop_flash_timer
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_start_flash_timer
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_config_update
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFLASH_RELEASE
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFLASH_LOCK
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_xfer
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq25120_read_status
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq25120_init
</UL>

<P><STRONG><a name="[1c8]"></a>lsm6ds3_active_sensors</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lsm6ds3.o(i.lsm6ds3_active_sensors))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_active_axes
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_en
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_en
</UL>

<P><STRONG><a name="[1f9]"></a>lsm6ds3_check_wakeup_evt</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lsm6ds3.o(i.lsm6ds3_check_wakeup_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lsm6ds3_check_wakeup_evt &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_power_state
</UL>

<P><STRONG><a name="[200]"></a>lsm6ds3_check_wom</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, lsm6ds3.o(i.lsm6ds3_check_wom))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lsm6ds3_check_wom &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_slp_check
</UL>

<P><STRONG><a name="[225]"></a>lsm6ds3_disable_all</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, lsm6ds3.o(i.lsm6ds3_disable_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 1960<LI>Call Chain = lsm6ds3_disable_all &rArr; lsm6ds3_disable_sensors &rArr; lsm6ds3_reconfigure_fifo &rArr; lsm6ds3_read_fifo &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_disable_sensors
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_imu
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_wake_on_motion
</UL>

<P><STRONG><a name="[226]"></a>lsm6ds3_disable_sensors</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, lsm6ds3.o(i.lsm6ds3_disable_sensors))
<BR><BR>[Stack]<UL><LI>Max Depth = 1936<LI>Call Chain = lsm6ds3_disable_sensors &rArr; lsm6ds3_reconfigure_fifo &rArr; lsm6ds3_read_fifo &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_wake_on_motion
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_write_data_with_mask
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_set_odr
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_set_irq
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_reconfigure_fifo
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_enable_pedometer
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_enable_embedded_func
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_wake_on_motion
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_disable_all
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_gyro
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_compass
</UL>

<P><STRONG><a name="[22d]"></a>lsm6ds3_enable_sensors</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, lsm6ds3.o(i.lsm6ds3_enable_sensors))
<BR><BR>[Stack]<UL><LI>Max Depth = 1936<LI>Call Chain = lsm6ds3_enable_sensors &rArr; lsm6ds3_reconfigure_fifo &rArr; lsm6ds3_read_fifo &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_write_data_with_mask
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_set_odr
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_set_irq
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_reconfigure_fifo
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_enable_pedometer
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_enable_embedded_func
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_gyro
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_compass
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_accel
</UL>

<P><STRONG><a name="[16b]"></a>lsm6ds3_fifo_management</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, lsm6ds3.o(i.lsm6ds3_fifo_management))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912<LI>Call Chain = lsm6ds3_fifo_management &rArr; lsm6ds3_read_fifo &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___9_lsm6ds3_c_09874117__nrf_delay_us
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_set_fifo_mode
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_read_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collect_imu_data
</UL>

<P><STRONG><a name="[1ca]"></a>lsm6ds3_get_accel_fsr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lsm6ds3.o(i.lsm6ds3_get_accel_fsr))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_fsr
</UL>

<P><STRONG><a name="[1cb]"></a>lsm6ds3_get_accel_samp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lsm6ds3.o(i.lsm6ds3_get_accel_samp))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_sample_rate
</UL>

<P><STRONG><a name="[1cc]"></a>lsm6ds3_get_accel_sens</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lsm6ds3.o(i.lsm6ds3_get_accel_sens))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_sens
</UL>

<P><STRONG><a name="[1ce]"></a>lsm6ds3_get_gyro_fsr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lsm6ds3.o(i.lsm6ds3_get_gyro_fsr))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_fsr
</UL>

<P><STRONG><a name="[1d0]"></a>lsm6ds3_get_gyro_samp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lsm6ds3.o(i.lsm6ds3_get_gyro_samp))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_sample_rate
</UL>

<P><STRONG><a name="[6c]"></a>lsm6ds3_i2c_read</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lsm6ds3_i2c.o(i.lsm6ds3_i2c_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = lsm6ds3_i2c_read &rArr; hal_twim_read &rArr; twim_busy &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_twim_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_i2c.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>lsm6ds3_i2c_write</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lsm6ds3_i2c.o(i.lsm6ds3_i2c_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = lsm6ds3_i2c_write &rArr; hal_twim_write &rArr; twim_busy &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_twim_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_i2c.o(.constdata)
</UL>
<P><STRONG><a name="[1f4]"></a>lsm6ds3_init_sensors</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, lsm6ds3.o(i.lsm6ds3_init_sensors))
<BR><BR>[Stack]<UL><LI>Max Depth = 1928<LI>Call Chain = lsm6ds3_init_sensors &rArr; lsm6ds3_reconfigure_fifo &rArr; lsm6ds3_read_fifo &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_write_data_with_mask
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_set_fs
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_reconfigure_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_init
</UL>

<P><STRONG><a name="[232]"></a>lsm6ds3_run_self_test</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, lsm6ds3.o(i.lsm6ds3_run_self_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = lsm6ds3_run_self_test &rArr; lsm6ds3_self_test &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_self_test
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_imu
</UL>

<P><STRONG><a name="[1a1]"></a>lsm6ds3_wake_on_motion</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, lsm6ds3.o(i.lsm6ds3_wake_on_motion))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = lsm6ds3_wake_on_motion &rArr;  lsm6ds3_disable_sensors (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_disable_sensors
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_disable_all
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_write_data_with_mask
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_set_odr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_motion_wakeup
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_disable_sensors
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_accel
</UL>

<P><STRONG><a name="[30]"></a>main</STRONG> (Thumb, 1666 bytes, Stack size 32 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 2640<LI>Call Chain = main &rArr; ble_send_nus_data &rArr; packetize_record &rArr; get_next_record &rArr; load_output_buffer &rArr; inform_rec_tranceived &rArr;  load_output_buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_config
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_hardware
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_imu
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ship_mode
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config_update_flag
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_packet_wrapper
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_down_save_records
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_wdt_channel_feed
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manufacture_mode
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_write_string
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_uninit
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_over_ride
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mem_manager
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_comms
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrm_read_cmd
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hw_test_request
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hw_test_flags
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_config_update_flag
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_hw_init_error
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_reporter_config
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_motion_wakeup
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_tail_block
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_transfer_packets_wrapper
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_send_nus_data
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_shutoff
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_report
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_isdav
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_init
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_chr_present
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_trace_init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_min_debug_priority
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si115xWriteToRegister
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si115xReadFromRegister
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si1153_twi_init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si1153_Init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HRMs
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminate_connection
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_imu
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_calendar_events
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_key_ring
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indicate_battery_state
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;form_version_strings
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_all_bonds
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timers_init
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_defaults
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_manager_init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_imu
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_update
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_stop
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1f0]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_twim_xfer
</UL>

<P><STRONG><a name="[1bb]"></a>manufacture_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mem_manager.o(i.manufacture_mode))
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_hardware
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_new_comms
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
</UL>

<P><STRONG><a name="[249]"></a>motionAnalyze</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, data_crunch.o(i.motionAnalyze))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = motionAnalyze &rArr; cyclic_motion_monitor &rArr; stepStateMachine_2 &rArr; mrs_butterworth_filter &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyclic_motion_monitor
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_linear_accel
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_imu
</UL>

<P><STRONG><a name="[3c]"></a>motion_int_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i.motion_int_handler))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.config_imu)
</UL>
<P><STRONG><a name="[b9]"></a>nrf_delay_ms</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nrf_delay.o(i.nrf_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_nrf_delay_c_532987f3__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si115xReset
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_self_test
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrm_read_cmd
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si1153_Init
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timers_init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_init_sensors
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_set_fs
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_self_test
</UL>

<P><STRONG><a name="[20f]"></a>nrf_drv_clock_on_soc_event</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.nrf_drv_clock_on_soc_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_drv_clock_on_soc_event
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intern_softdevice_events_execute
</UL>

<P><STRONG><a name="[251]"></a>nrf_drv_common_irq_enable</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, nrf_drv_common.o(i.nrf_drv_common_irq_enable))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_wdt_init
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_init
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
</UL>

<P><STRONG><a name="[24b]"></a>nrf_drv_gpiote_in_event_disable</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_in_event_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_drv_gpiote_in_event_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_te
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_port
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_imu
</UL>

<P><STRONG><a name="[176]"></a>nrf_drv_gpiote_in_event_enable</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_in_event_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_gpiote_in_event_enable &rArr; nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_te
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_port
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_imu
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_imu
</UL>

<P><STRONG><a name="[175]"></a>nrf_drv_gpiote_in_init</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_in_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = nrf_drv_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_imu
</UL>

<P><STRONG><a name="[174]"></a>nrf_drv_gpiote_init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_drv_gpiote_init
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_free
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_imu
</UL>

<P><STRONG><a name="[173]"></a>nrf_drv_gpiote_is_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_is_init))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_imu
</UL>

<P><STRONG><a name="[107]"></a>nrf_drv_ppi_channel_alloc</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, nrf_drv_ppi.o(i.nrf_drv_ppi_channel_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = nrf_drv_ppi_channel_alloc &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_allocated_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_init
</UL>

<P><STRONG><a name="[108]"></a>nrf_drv_ppi_channel_enable</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, nrf_drv_ppi.o(i.nrf_drv_ppi_channel_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_drv_ppi_channel_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_programmable_app_channel
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_app_channel
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_allocated_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_init
</UL>

<P><STRONG><a name="[106]"></a>nrf_drv_ppi_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_drv_ppi.o(i.nrf_drv_ppi_init))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_init
</UL>

<P><STRONG><a name="[99]"></a>nrf_drv_saadc_buffer_convert</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, nrf_drv_saadc.o(i.nrf_drv_saadc_buffer_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_drv_saadc_buffer_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_check
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_channel_input_set
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_buffer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_init
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAADC_IRQHandler
</UL>

<P><STRONG><a name="[10a]"></a>nrf_drv_saadc_channel_init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, nrf_drv_saadc.o(i.nrf_drv_saadc_channel_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_drv_saadc_channel_init &rArr; nrf_saadc_channel_init
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_channel_init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_channel_input_set
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_init
</UL>

<P><STRONG><a name="[109]"></a>nrf_drv_saadc_init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, nrf_drv_saadc.o(i.nrf_drv_saadc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_drv_saadc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_init
</UL>

<P><STRONG><a name="[1e6]"></a>nrf_drv_spi_init</STRONG> (Thumb, 282 bytes, Stack size 48 bytes, nrf_drv_spi.o(i.nrf_drv_spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = nrf_drv_spi_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_repair
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spim_init
</UL>

<P><STRONG><a name="[1e8]"></a>nrf_drv_spi_repair</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nrf_drv_spi.o(i.nrf_drv_spi_repair))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = nrf_drv_spi_repair &rArr; nrf_drv_spi_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_uninit
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spim_xfer
</UL>

<P><STRONG><a name="[257]"></a>nrf_drv_spi_uninit</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, nrf_drv_spi.o(i.nrf_drv_spi_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_spi_uninit
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_repair
</UL>

<P><STRONG><a name="[258]"></a>nrf_drv_spi_xfer</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, nrf_drv_spi.o(i.nrf_drv_spi_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
</UL>

<P><STRONG><a name="[25b]"></a>nrf_drv_twi_disable</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_drv_twi_disable))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_uninit
</UL>

<P><STRONG><a name="[bd]"></a>nrf_drv_twi_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_drv_twi_enable))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_twim_init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si1153_twi_init
</UL>

<P><STRONG><a name="[bc]"></a>nrf_drv_twi_init</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, nrf_drv_twi.o(i.nrf_drv_twi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_twi_init &rArr; twi_clear_bus
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_twim_init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si1153_twi_init
</UL>

<P><STRONG><a name="[c1]"></a>nrf_drv_twi_rx</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, nrf_drv_twi.o(i.nrf_drv_twi_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nrf_drv_twi_rx &rArr; nrf_drv_twi_xfer &rArr; twim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si115xReadFromRegister
</UL>

<P><STRONG><a name="[c0]"></a>nrf_drv_twi_tx</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, nrf_drv_twi.o(i.nrf_drv_twi_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si115xParamSet
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si115xWriteToRegister
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si115xReadFromRegister
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_twim_xfer
</UL>

<P><STRONG><a name="[1ef]"></a>nrf_drv_twi_uninit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, nrf_drv_twi.o(i.nrf_drv_twi_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_drv_twi_uninit
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_twim_uninit
</UL>

<P><STRONG><a name="[1f1]"></a>nrf_drv_twi_xfer</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrf_drv_twi.o(i.nrf_drv_twi_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_drv_twi_xfer &rArr; twim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_rx
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_twim_xfer
</UL>

<P><STRONG><a name="[25d]"></a>nrf_drv_wdt_channel_alloc</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, nrf_drv_wdt.o(i.nrf_drv_wdt_channel_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_drv_wdt_channel_alloc &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timers_init
</UL>

<P><STRONG><a name="[237]"></a>nrf_drv_wdt_channel_feed</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_drv_wdt.o(i.nrf_drv_wdt_channel_feed))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[27d]"></a>nrf_drv_wdt_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_drv_wdt.o(i.nrf_drv_wdt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timers_init
</UL>

<P><STRONG><a name="[25e]"></a>nrf_drv_wdt_init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, nrf_drv_wdt.o(i.nrf_drv_wdt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_drv_wdt_init
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timers_init
</UL>

<P><STRONG><a name="[254]"></a>nrf_saadc_channel_init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, nrf_saadc.o(i.nrf_saadc_channel_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_saadc_channel_init
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_channel_init
</UL>

<P><STRONG><a name="[26d]"></a>number_fields</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, reports.o(i.number_fields))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reporter
</UL>

<P><STRONG><a name="[261]"></a>parse_msg</STRONG> (Thumb, 3390 bytes, Stack size 48 bytes, comms.o(i.parse_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 2168<LI>Call Chain = parse_msg &rArr; erase_reporter_config &rArr; enable_reporters &rArr; buffer_record &rArr; add_record &rArr; load_output_buffer &rArr; inform_rec_tranceived &rArr;  load_output_buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reporter
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_hw_test_request
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reporter_time_rebase
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;records_byte_cnt
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_total_record_cnt
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hw_test_status
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_active_reporters
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_reporters
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secure_connect_sm
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_packet
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_transfer_packets
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config_update_flag
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_write_string
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_reporter_config
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminate_connection
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_unix_time
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_unix_time
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSystemTimeMs
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_all_bonds
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uart_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
</UL>

<P><STRONG><a name="[241]"></a>power_down_save_records</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, reports.o(i.power_down_save_records))
<BR><BR>[Stack]<UL><LI>Max Depth = 2048<LI>Call Chain = power_down_save_records &rArr; buffer_record &rArr; add_record &rArr; load_output_buffer &rArr; inform_rec_tranceived &rArr;  load_output_buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_config
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_buffered_recs
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_record
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bd]"></a>pstorage_access_status_get</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, pstorage.o(i.pstorage_access_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_access_in_progress
</UL>

<P><STRONG><a name="[149]"></a>pstorage_block_identifier_get</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, pstorage.o(i.pstorage_block_identifier_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pstorage_block_identifier_get
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bond_data_load
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_pstorage_cb_handler
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_instance_free
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_context_store
</UL>

<P><STRONG><a name="[196]"></a>pstorage_clear</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, pstorage.o(i.pstorage_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = pstorage_clear &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; clear_operation_execute &rArr; sm_state_change &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_word_aligned
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_instance_free
</UL>

<P><STRONG><a name="[199]"></a>pstorage_init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, pstorage.o(i.pstorage_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = pstorage_init &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_element_init
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_manager_init
</UL>

<P><STRONG><a name="[14a]"></a>pstorage_load</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, pstorage.o(i.pstorage_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = pstorage_load &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_word_aligned
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bond_data_load
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_context_load
</UL>

<P><STRONG><a name="[19e]"></a>pstorage_register</STRONG> (Thumb, 122 bytes, Stack size 12 bytes, pstorage.o(i.pstorage_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pstorage_register
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
</UL>

<P><STRONG><a name="[3f]"></a>pstorage_store</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, pstorage.o(i.pstorage_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = pstorage_store &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; clear_operation_execute &rArr; sm_state_change &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_word_aligned
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_enqueue
</UL>
<BR>[Address Reference Count : 2]<UL><LI> vsp_device_manager_peripheral.o(i.device_context_store)
<LI> vsp_device_manager_peripheral.o(i.gatts_context_store)
</UL>
<P><STRONG><a name="[26b]"></a>pstorage_sys_event_handler</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, pstorage.o(i.pstorage_sys_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = pstorage_sys_event_handler &rArr; flash_operation_success_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; command_end_procedure_run &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_state_change
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_success_run
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_end_procedure_run
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_evt_dispatch
</UL>

<P><STRONG><a name="[3e]"></a>pstorage_update</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, pstorage.o(i.pstorage_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = pstorage_update &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; clear_operation_execute &rArr; sm_state_change &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_word_aligned
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_enqueue
</UL>
<BR>[Address Reference Count : 2]<UL><LI> vsp_device_manager_peripheral.o(i.device_context_store)
<LI> vsp_device_manager_peripheral.o(i.gatts_context_store)
</UL>
<P><STRONG><a name="[248]"></a>queue_packet_wrapper</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, comms.o(i.queue_packet_wrapper))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = queue_packet_wrapper &rArr; queue_packet &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[262]"></a>rec_ack_req</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, reports.o(i.rec_ack_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = rec_ack_req &rArr; log_rtt_write_string &rArr; SEGGER_RTT_WriteString &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_write_string
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetize_record
</UL>

<P><STRONG><a name="[1a3]"></a>record_accel_off</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hal_imu.o(i.record_accel_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 2016<LI>Call Chain = record_accel_off &rArr; lock_accel &rArr; imu_power_state &rArr; stop_gyro &rArr; lsm6ds3_disable_sensors &rArr; lsm6ds3_reconfigure_fifo &rArr; lsm6ds3_read_fifo &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_accel
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_reporters
</UL>

<P><STRONG><a name="[1a2]"></a>record_accel_on</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hal_imu.o(i.record_accel_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 2024<LI>Call Chain = record_accel_on &rArr; lock_accel &rArr; imu_power_state &rArr; stop_gyro &rArr; lsm6ds3_disable_sensors &rArr; lsm6ds3_reconfigure_fifo &rArr; lsm6ds3_read_fifo &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_accel
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_reporters
</UL>

<P><STRONG><a name="[1e3]"></a>record_added</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mem_manager.o(i.record_added))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = record_added &rArr; inc_report_length &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_report_length
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_log_memory_check
</UL>

<P><STRONG><a name="[1a7]"></a>record_compass_off</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hal_imu.o(i.record_compass_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 2024<LI>Call Chain = record_compass_off &rArr; lock_accel &rArr; imu_power_state &rArr; stop_gyro &rArr; lsm6ds3_disable_sensors &rArr; lsm6ds3_reconfigure_fifo &rArr; lsm6ds3_read_fifo &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_magnet
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_accel
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_reporters
</UL>

<P><STRONG><a name="[1a6]"></a>record_compass_on</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hal_imu.o(i.record_compass_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 2024<LI>Call Chain = record_compass_on &rArr; lock_accel &rArr; imu_power_state &rArr; stop_gyro &rArr; lsm6ds3_disable_sensors &rArr; lsm6ds3_reconfigure_fifo &rArr; lsm6ds3_read_fifo &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_magnet
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_accel
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_reporters
</UL>

<P><STRONG><a name="[1a5]"></a>record_gyro_off</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hal_imu.o(i.record_gyro_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 2024<LI>Call Chain = record_gyro_off &rArr; lock_accel &rArr; imu_power_state &rArr; stop_gyro &rArr; lsm6ds3_disable_sensors &rArr; lsm6ds3_reconfigure_fifo &rArr; lsm6ds3_read_fifo &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_gyro
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_accel
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_reporters
</UL>

<P><STRONG><a name="[1a4]"></a>record_gyro_on</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hal_imu.o(i.record_gyro_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 2024<LI>Call Chain = record_gyro_on &rArr; lock_accel &rArr; imu_power_state &rArr; stop_gyro &rArr; lsm6ds3_disable_sensors &rArr; lsm6ds3_reconfigure_fifo &rArr; lsm6ds3_read_fifo &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_gyro
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_accel
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_reporters
</UL>

<P><STRONG><a name="[1dd]"></a>record_removed</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mem_manager.o(i.record_removed))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = record_removed &rArr; dec_report_length &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_report_length
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_discard_tail_page
</UL>

<P><STRONG><a name="[264]"></a>records_byte_cnt</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mem_manager.o(i.records_byte_cnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = records_byte_cnt &rArr; hal_unsent_log_len &rArr; calc_log_len &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_total_record_cnt
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_unsent_log_len
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_msg
</UL>

<P><STRONG><a name="[265]"></a>reporter_time_rebase</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, reports.o(i.reporter_time_rebase))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = reporter_time_rebase
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_msg
</UL>

<P><STRONG><a name="[160]"></a>reporter_update_cmplt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mem_manager.o(i.reporter_update_cmplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1952<LI>Call Chain = reporter_update_cmplt &rArr; save_buffered_recs &rArr; hal_store_data &rArr; hal_discard_tail_page &rArr; hal_retrieve_rec &rArr; copy_nvm &rArr; ext_copy_log &rArr; spiflash_read &rArr; spiflash_address_command &rArr; spiflash_xfer &rArr; hal_spim_xfer &rArr; spim_xfer &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_buffered_recs
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_reporters
</UL>

<P><STRONG><a name="[26e]"></a>sampling_rate_fit</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, reports.o(i.sampling_rate_fit))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reporter
</UL>

<P><STRONG><a name="[df]"></a>save_buffered_recs</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, mem_manager.o(i.save_buffered_recs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1952<LI>Call Chain = save_buffered_recs &rArr; hal_store_data &rArr; hal_discard_tail_page &rArr; hal_retrieve_rec &rArr; copy_nvm &rArr; ext_copy_log &rArr; spiflash_read &rArr; spiflash_address_command &rArr; spiflash_xfer &rArr; hal_spim_xfer &rArr; spim_xfer &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_store_data
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_down_save_records
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reporter_update_cmplt
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_record
</UL>

<P><STRONG><a name="[da]"></a>save_fields</STRONG> (Thumb, 142 bytes, Stack size 12 bytes, reports.o(i.save_fields))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = save_fields
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_reporters
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accum_3axis_data
</UL>

<P><STRONG><a name="[13e]"></a>sd_check_ram_start</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, softdevice_handler.o(i.sd_check_ram_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = sd_check_ram_start &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_end_address_get
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[19c]"></a>secure_connection</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, comms.o(i.secure_connection))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_control_data_handler
</UL>

<P><STRONG><a name="[23e]"></a>service_calendar_events</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, main.o(i.service_calendar_events))
<BR><BR>[Stack]<UL><LI>Max Depth = 2160<LI>Call Chain = service_calendar_events &rArr; check_reporters &rArr; enable_reporters &rArr; buffer_record &rArr; add_record &rArr; load_output_buffer &rArr; inform_rec_tranceived &rArr;  load_output_buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config_update_flag
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_write_string
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_reporters
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[23d]"></a>service_imu</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, main.o(i.service_imu))
<BR><BR>[Stack]<UL><LI>Max Depth = 2008<LI>Call Chain = service_imu &rArr; imu_power_state &rArr; stop_gyro &rArr; lsm6ds3_disable_sensors &rArr; lsm6ds3_reconfigure_fifo &rArr; lsm6ds3_read_fifo &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motionAnalyze
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_write_string
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_slp_check
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_power_state
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_init
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_twim_uninit
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_twim_init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_motion_wakeup
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collect_imu_data
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20b]"></a>setStepCnt_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, step_detect_1.o(i.setStepCnt_1))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_motion_analysis
</UL>

<P><STRONG><a name="[20c]"></a>setStepCnt_2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, step_detect_2.o(i.setStepCnt_2))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_motion_analysis
</UL>

<P><STRONG><a name="[189]"></a>set_config_update_flag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mem_manager.o(i.set_config_update_flag))
<BR><BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secure_connect_sm
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_msg
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_key_ring
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_calendar_events
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_all_bonds
</UL>

<P><STRONG><a name="[268]"></a>set_hw_test_request</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, manufacture_test.o(i.set_hw_test_request))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_msg
</UL>

<P><STRONG><a name="[193]"></a>set_key_ring</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, main.o(i.set_key_ring))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = set_key_ring &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config_update_flag
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_instance_allocate
</UL>

<P><STRONG><a name="[1a9]"></a>set_reporter</STRONG> (Thumb, 1174 bytes, Stack size 40 bytes, reports.o(i.set_reporter))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = set_reporter &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_log_region_size
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sampling_rate_fit
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;number_fields
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_sample_rate
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_compass_sample_rate
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_sample_rate
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_msg
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_reporter_config
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_reporters
</UL>

<P><STRONG><a name="[266]"></a>set_unix_time</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.set_unix_time))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_msg
</UL>

<P><STRONG><a name="[242]"></a>ship_mode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mem_manager.o(i.ship_mode))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[140]"></a>softdevice_ble_evt_handler_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, softdevice_handler.o(i.softdevice_ble_evt_handler_set))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[13f]"></a>softdevice_enable</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, softdevice_handler.o(i.softdevice_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = softdevice_enable &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ram_end_address_get
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[13d]"></a>softdevice_enable_get_default_config</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, softdevice_handler.o(i.softdevice_enable_get_default_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = softdevice_enable_get_default_config
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[4c]"></a>softdevice_fault_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, softdevice_handler.o(i.softdevice_fault_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = softdevice_fault_handler &rArr; app_error_fault_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> softdevice_handler.o(i.softdevice_handler_init)
</UL>
<P><STRONG><a name="[13c]"></a>softdevice_handler_init</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, softdevice_handler.o(i.softdevice_handler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = softdevice_handler_init &rArr; log_rtt_init &rArr; SEGGER_RTT_ConfigUpBuffer &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_EnableIRQ
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[141]"></a>softdevice_sys_evt_handler_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, softdevice_handler.o(i.softdevice_sys_evt_handler_set))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[1b8]"></a>spiflash_byte_page_write</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, spiflash.o(i.spiflash_byte_page_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = spiflash_byte_page_write &rArr; write_sm &rArr; spiflash_write_data &rArr; spiflash_xfer &rArr; hal_spim_xfer &rArr; spim_xfer &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFLASH_KEY_MATCH
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sm
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_config_cb
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_store_log
</UL>

<P><STRONG><a name="[1b2]"></a>spiflash_deep_power_down</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, spiflash.o(i.spiflash_deep_power_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = spiflash_deep_power_down &rArr; spiflash_xfer &rArr; hal_spim_xfer &rArr; spim_xfer &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFLASH_KEY_MATCH
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_config_cb
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ext_flash
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_store_log
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_copy_log
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_clear_log_page
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_clear_log_block
</UL>

<P><STRONG><a name="[1b1]"></a>spiflash_erase_4k_block</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, spiflash.o(i.spiflash_erase_4k_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = spiflash_erase_4k_block &rArr; erase_sm &rArr; spiflash_address_command &rArr; spiflash_xfer &rArr; hal_spim_xfer &rArr; spim_xfer &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFLASH_KEY_MATCH
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_sm
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_clear_log_block
</UL>

<P><STRONG><a name="[206]"></a>spiflash_init</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, spiflash.o(i.spiflash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = spiflash_init &rArr; spiflash_wakeup &rArr; spiflash_xfer &rArr; hal_spim_xfer &rArr; spim_xfer &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_wakeup
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___10_spiflash_c_7bbececb__nrf_delay_us
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_write_enable
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_read_status
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_read_id
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_global_protect
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spim_init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ext_flash
</UL>

<P><STRONG><a name="[1b4]"></a>spiflash_page_erase</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, spiflash.o(i.spiflash_page_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = spiflash_page_erase &rArr; erase_sm &rArr; spiflash_address_command &rArr; spiflash_xfer &rArr; hal_spim_xfer &rArr; spim_xfer &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFLASH_KEY_MATCH
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_sm
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_config_cb
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_clear_log_page
</UL>

<P><STRONG><a name="[1b6]"></a>spiflash_read</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, spiflash.o(i.spiflash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = spiflash_read &rArr; spiflash_address_command &rArr; spiflash_xfer &rArr; hal_spim_xfer &rArr; spim_xfer &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFLASH_KEY_MATCH
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_address_command
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_config_cb
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ext_flash
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_copy_log
</UL>

<P><STRONG><a name="[207]"></a>spiflash_sector_protection</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, spiflash.o(i.spiflash_sector_protection))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = spiflash_sector_protection &rArr; protect_sm &rArr; spiflash_address_command &rArr; spiflash_xfer &rArr; hal_spim_xfer &rArr; spim_xfer &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFLASH_KEY_MATCH
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protect_sm
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_config_cb
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ext_flash
</UL>

<P><STRONG><a name="[1b0]"></a>spiflash_wakeup</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, spiflash.o(i.spiflash_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = spiflash_wakeup &rArr; spiflash_xfer &rArr; hal_spim_xfer &rArr; spim_xfer &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFLASH_KEY_MATCH
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_config_cb
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_store_log
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_copy_log
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_clear_log_page
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_clear_log_block
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_init
</UL>

<P><STRONG><a name="[278]"></a>spim_timer_stop</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hal_spim.o(i.spim_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = spim_timer_stop &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSystemTimeMs
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_handler
</UL>

<P><STRONG><a name="[1f8]"></a>start_accel</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, hal_imu.o(i.start_accel))
<BR><BR>[Stack]<UL><LI>Max Depth = 1952<LI>Call Chain = start_accel &rArr; lsm6ds3_enable_sensors &rArr; lsm6ds3_reconfigure_fifo &rArr; lsm6ds3_read_fifo &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_wake_on_motion
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_enable_sensors
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_sample_rate
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_fsr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_power_state
</UL>

<P><STRONG><a name="[1ff]"></a>start_compass</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, hal_imu.o(i.start_compass))
<BR><BR>[Stack]<UL><LI>Max Depth = 1952<LI>Call Chain = start_compass &rArr; lsm6ds3_enable_sensors &rArr; lsm6ds3_reconfigure_fifo &rArr; lsm6ds3_read_fifo &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_enable_sensors
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_power_state
</UL>

<P><STRONG><a name="[1fe]"></a>start_gyro</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, hal_imu.o(i.start_gyro))
<BR><BR>[Stack]<UL><LI>Max Depth = 1952<LI>Call Chain = start_gyro &rArr; lsm6ds3_enable_sensors &rArr; lsm6ds3_reconfigure_fifo &rArr; lsm6ds3_read_fifo &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_enable_sensors
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_sample_rate
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_fsr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_power_state
</UL>

<P><STRONG><a name="[181]"></a>stepStateMachine_2</STRONG> (Thumb, 1536 bytes, Stack size 48 bytes, step_detect_2.o(i.stepStateMachine_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = stepStateMachine_2 &rArr; mrs_butterworth_filter &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_write_string
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_unix_time
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mrs_butterworth_filter
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_sqrt
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keep_gyro_on
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keep_accel_on
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyclic_motion_monitor
</UL>

<P><STRONG><a name="[20e]"></a>step_history_1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, step_detect_1.o(i.step_history_1))
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_reporters
</UL>

<P><STRONG><a name="[20d]"></a>step_history_2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, step_detect_2.o(i.step_history_2))
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_reporters
</UL>

<P><STRONG><a name="[1fd]"></a>stop_compass</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, hal_imu.o(i.stop_compass))
<BR><BR>[Stack]<UL><LI>Max Depth = 1952<LI>Call Chain = stop_compass &rArr; lsm6ds3_disable_sensors &rArr; lsm6ds3_reconfigure_fifo &rArr; lsm6ds3_read_fifo &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_disable_sensors
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_power_state
</UL>

<P><STRONG><a name="[1fc]"></a>stop_gyro</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, hal_imu.o(i.stop_gyro))
<BR><BR>[Stack]<UL><LI>Max Depth = 1952<LI>Call Chain = stop_gyro &rArr; lsm6ds3_disable_sensors &rArr; lsm6ds3_reconfigure_fifo &rArr; lsm6ds3_read_fifo &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_disable_sensors
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_power_state
</UL>

<P><STRONG><a name="[246]"></a>stop_imu</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, hal_imu.o(i.stop_imu))
<BR><BR>[Stack]<UL><LI>Max Depth = 1976<LI>Call Chain = stop_imu &rArr; lsm6ds3_disable_all &rArr; lsm6ds3_disable_sensors &rArr; lsm6ds3_reconfigure_fifo &rArr; lsm6ds3_read_fifo &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_disable_all
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18d]"></a>terminate_connection</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, main.o(i.terminate_connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = terminate_connection &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_write_string
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secure_connect_sm
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_msg
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detach_handler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_control_data_handler
</UL>

<P><STRONG><a name="[244]"></a>test_hardware</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, manufacture_test.o(i.test_hardware))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = test_hardware &rArr; battery_self_test &rArr; battery_update_status &rArr; bq25120_read_status &rArr; bq2510_reg_defaults &rArr; bq25120_write_data_with_mask &rArr; bq25120_i2c_read &rArr; hal_twim_read &rArr; twim_busy &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_imu
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_self_test
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manufacture_mode
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[27a]"></a>test_imu</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hal_imu.o(i.test_imu))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = test_imu &rArr; lsm6ds3_run_self_test &rArr; lsm6ds3_self_test &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_disable
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_run_self_test
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_hardware
</UL>

<P><STRONG><a name="[33]"></a>twi_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, si115x_functions.o(i.twi_handler))
<BR>[Address Reference Count : 1]<UL><LI> si115x_functions.o(i.Si1153_twi_init)
</UL>
<P><STRONG><a name="[45]"></a>twim_handler</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, hal_twim.o(i.twim_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = twim_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_twim.o(i.hal_twim_init)
</UL>
<P><STRONG><a name="[240]"></a>update_config</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, mem_manager.o(i.update_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = update_config &rArr; hal_update_config &rArr; ext_config_update &rArr; update_config_cb &rArr; spiflash_byte_page_write &rArr; write_sm &rArr; spiflash_write_data &rArr; spiflash_xfer &rArr; hal_spim_xfer &rArr; spim_xfer &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSystemTimeMs
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_update_config
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_down_save_records
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[55]"></a>wdt_event_handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i.wdt_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wdt_event_handler &rArr; log_rtt_write_string &rArr; SEGGER_RTT_WriteString &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_write_string
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.timers_init)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[247]"></a>__NVIC_SystemReset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(i.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[eb]"></a>advertising_init</STRONG> (Thumb, 106 bytes, Stack size 104 bytes, main.o(i.advertising_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = advertising_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ee]"></a>advertising_stop</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(i.advertising_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = advertising_stop &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_write_string
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[123]"></a>ble_bas_update</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, main.o(i.ble_bas_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ble_bas_update &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_battery_state_update
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_battery_level_update
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3a]"></a>ble_evt_dispatch</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, main.o(i.ble_evt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = ble_evt_dispatch &rArr; dm_ble_evt_handler &rArr; device_instance_allocate &rArr; device_instance_free &rArr; pstorage_clear &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; clear_operation_execute &rArr; sm_state_change &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_on_ble_evt
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_on_ble_evt
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.ble_stack_init)
</UL>
<P><STRONG><a name="[13b]"></a>ble_stack_init</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, main.o(i.ble_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = ble_stack_init &rArr; softdevice_enable &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_sys_evt_handler_set
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_enable_get_default_config
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_enable
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_ble_evt_handler_set
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_check_ram_start
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16f]"></a>config_imu</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, main.o(i.config_imu))
<BR><BR>[Stack]<UL><LI>Max Depth = 1960<LI>Call Chain = config_imu &rArr; imu_init &rArr; lsm6ds3_init_sensors &rArr; lsm6ds3_reconfigure_fifo &rArr; lsm6ds3_read_fifo &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_is_init
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_write_string
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_motion_analysis
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_twim_init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[49]"></a>conn_params_error_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.conn_params_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = conn_params_error_handler &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[40]"></a>device_manager_evt_handler</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, main.o(i.device_manager_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = device_manager_evt_handler &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.device_manager_init)
</UL>
<P><STRONG><a name="[198]"></a>device_manager_init</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, main.o(i.device_manager_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = device_manager_init &rArr; dm_init &rArr; pstorage_clear &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; clear_operation_execute &rArr; sm_state_change &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_register
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c7]"></a>gap_params_init</STRONG> (Thumb, 126 bytes, Stack size 80 bytes, main.o(i.gap_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = gap_params_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manufacture_mode
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d4]"></a>gpio_defaults</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, main.o(i.gpio_defaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = gpio_defaults &rArr; led_init &rArr; log_rtt_write_string &rArr; SEGGER_RTT_WriteString &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_range_cfg_output
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d8]"></a>nrf_gpio_cfg</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, main.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_defaults
</UL>

<P><STRONG><a name="[1d5]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, main.o(i.nrf_gpio_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_defaults
</UL>

<P><STRONG><a name="[1d6]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, main.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_range_cfg_output
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_defaults
</UL>

<P><STRONG><a name="[1d7]"></a>nrf_gpio_range_cfg_output</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, main.o(i.nrf_gpio_range_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = nrf_gpio_range_cfg_output &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_defaults
</UL>

<P><STRONG><a name="[4b]"></a>nus_data_handler</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, main.o(i.nus_data_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 2208<LI>Call Chain = nus_data_handler &rArr; parse_msg &rArr; erase_reporter_config &rArr; enable_reporters &rArr; buffer_record &rArr; add_record &rArr; load_output_buffer &rArr; inform_rec_tranceived &rArr;  load_output_buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_msg
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_write_string
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.services_init)
</UL>
<P><STRONG><a name="[35]"></a>on_adv_evt</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, main.o(i.on_adv_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = on_adv_evt &rArr; log_rtt_write_string &rArr; SEGGER_RTT_WriteString &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_write_string
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.advertising_init)
</UL>
<P><STRONG><a name="[12f]"></a>on_ble_evt</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, main.o(i.on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = on_ble_evt &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_write_string
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_new_comms
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[48]"></a>on_conn_params_evt</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, main.o(i.on_conn_params_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = on_conn_params_evt &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_write_string
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[23a]"></a>services_init</STRONG> (Thumb, 604 bytes, Stack size 128 bytes, main.o(i.services_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = services_init &rArr; ble_dis_init &rArr; char_add &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manufacture_mode
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_write_string
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_ascii_to_utf8
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dis_init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3b]"></a>sys_evt_dispatch</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, main.o(i.sys_evt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = sys_evt_dispatch &rArr; pstorage_sys_event_handler &rArr; flash_operation_success_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; command_end_procedure_run &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_sys_event_handler
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.ble_stack_init)
</UL>
<P><STRONG><a name="[52]"></a>ticks_timer_handler</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, main.o(i.ticks_timer_handler))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.timers_init)
</UL>
<P><STRONG><a name="[236]"></a>timers_init</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, main.o(i.timers_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = timers_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_wdt_init
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_wdt_enable
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_wdt_channel_alloc
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_write_string
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_main_c_741fae72__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[136]"></a>ble_transfer_packets</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, comms.o(i.ble_transfer_packets))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ble_transfer_packets &rArr; ble_uart_tx &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_queue
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_write_string
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uart_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_msg
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_transfer_packets_wrapper
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_send_nus_data
</UL>

<P><STRONG><a name="[145]"></a>flush_queue</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, comms.o(i.flush_queue))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_transfer_packets
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_new_comms
</UL>

<P><STRONG><a name="[138]"></a>packetize_record</STRONG> (Thumb, 282 bytes, Stack size 552 bytes, comms.o(i.packetize_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 2552<LI>Call Chain = packetize_record &rArr; get_next_record &rArr; load_output_buffer &rArr; inform_rec_tranceived &rArr;  load_output_buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rec_ack_req
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_record
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_packet
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_write_string
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_send_nus_data
</UL>

<P><STRONG><a name="[135]"></a>queue_packet</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, comms.o(i.queue_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = queue_packet &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packetize_record
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_packet_wrapper
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_msg
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_send_nus_data
</UL>

<P><STRONG><a name="[267]"></a>secure_connect_sm</STRONG> (Thumb, 402 bytes, Stack size 48 bytes, comms.o(i.secure_connect_sm))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = secure_connect_sm &rArr; terminate_connection &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config_update_flag
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_write_string
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminate_connection
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_msg
</UL>

<P><STRONG><a name="[be]"></a>_waitUntilSleep</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, si115x_functions.o(i._waitUntilSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = _waitUntilSleep &rArr; Si115xReadFromRegister &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si115xReadFromRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si115xParamSet
</UL>

<P><STRONG><a name="[e4]"></a>ble_device_addr_encode</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, ble_advdata.o(i.ble_device_addr_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_device_addr_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[e7]"></a>conn_int_encode</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, ble_advdata.o(i.conn_int_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = conn_int_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[e3]"></a>le_role_encode</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, ble_advdata.o(i.le_role_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = le_role_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[e8]"></a>manuf_specific_data_encode</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, ble_advdata.o(i.manuf_specific_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = manuf_specific_data_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[ea]"></a>name_encode</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, ble_advdata.o(i.name_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = name_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[e9]"></a>service_data_encode</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, ble_advdata.o(i.service_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = service_data_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[e5]"></a>uint16_encode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_advdata.o(i.uint16_encode))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
</UL>

<P><STRONG><a name="[e6]"></a>uuid_list_encode</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, ble_advdata.o(i.uuid_list_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[286]"></a>uuid_list_sized_encode</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, ble_advdata.o(i.uuid_list_sized_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
</UL>

<P><STRONG><a name="[11b]"></a>ble_advertising_peer_address_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_advertising.o(i.ble_advertising_peer_address_clear))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
</UL>

<P><STRONG><a name="[11d]"></a>flash_access_in_progress</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ble_advertising.o(i.flash_access_in_progress))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = flash_access_in_progress &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_access_status_get
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_queued_op_count_get
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[11e]"></a>peer_address_exists</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ble_advertising.o(i.peer_address_exists))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[11f]"></a>whitelist_has_entries</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_advertising.o(i.whitelist_has_entries))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[128]"></a>conn_params_negotiation</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ble_conn_params.o(i.conn_params_negotiation))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = conn_params_negotiation &rArr; app_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_conn_params_ok
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
</UL>

<P><STRONG><a name="[17a]"></a>is_conn_params_ok</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ble_conn_params.o(i.is_conn_params_ok))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>

<P><STRONG><a name="[39]"></a>update_timeout_handler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ble_conn_params.o(i.update_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = update_timeout_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn_params.o(i.ble_conn_params_init)
</UL>
<P><STRONG><a name="[131]"></a>rx_char_add</STRONG> (Thumb, 220 bytes, Stack size 72 bytes, ble_nus.o(i.rx_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rx_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_init
</UL>

<P><STRONG><a name="[132]"></a>tx_char_add</STRONG> (Thumb, 160 bytes, Stack size 72 bytes, ble_nus.o(i.tx_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tx_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_init
</UL>

<P><STRONG><a name="[12a]"></a>char_add</STRONG> (Thumb, 156 bytes, Stack size 88 bytes, ble_dis.o(i.char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = char_add &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dis_init
</UL>

<P><STRONG><a name="[12c]"></a>pnp_id_encode</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ble_dis.o(i.pnp_id_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = pnp_id_encode &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dis_init
</UL>

<P><STRONG><a name="[12b]"></a>sys_id_encode</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ble_dis.o(i.sys_id_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = sys_id_encode &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dis_init
</UL>

<P><STRONG><a name="[10f]"></a>battery_level_char_add</STRONG> (Thumb, 266 bytes, Stack size 96 bytes, ble_vsp_bas.o(i.battery_level_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = battery_level_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_report_ref_encode
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_init
</UL>

<P><STRONG><a name="[116]"></a>battery_state_char_add</STRONG> (Thumb, 310 bytes, Stack size 104 bytes, ble_vsp_bas.o(i.battery_state_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = battery_state_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_report_ref_encode
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_init
</UL>

<P><STRONG><a name="[122]"></a>on_write</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ble_vsp_bas.o(i.on_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = on_write
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_on_ble_evt
</UL>

<P><STRONG><a name="[f0]"></a>app_evt_notify</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, vsp_device_manager_peripheral.o(i.app_evt_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = app_evt_notify &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_pstorage_cb_handler
</UL>

<P><STRONG><a name="[17b]"></a>connection_instance_allocate</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, vsp_device_manager_peripheral.o(i.connection_instance_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = connection_instance_allocate &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_instance_find
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
</UL>

<P><STRONG><a name="[17c]"></a>connection_instance_find</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, vsp_device_manager_peripheral.o(i.connection_instance_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = connection_instance_find
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_instance_allocate
</UL>

<P><STRONG><a name="[17d]"></a>connection_instance_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, vsp_device_manager_peripheral.o(i.connection_instance_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = connection_instance_init &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
</UL>

<P><STRONG><a name="[190]"></a>device_context_store</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, vsp_device_manager_peripheral.o(i.device_context_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = device_context_store &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_block_identifier_get
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
</UL>

<P><STRONG><a name="[191]"></a>device_instance_allocate</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, vsp_device_manager_peripheral.o(i.device_instance_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = device_instance_allocate &rArr; device_instance_free &rArr; pstorage_clear &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; clear_operation_execute &rArr; sm_state_change &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_key_ring
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_instance_free
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
</UL>

<P><STRONG><a name="[194]"></a>device_instance_find</STRONG> (Thumb, 274 bytes, Stack size 72 bytes, vsp_device_manager_peripheral.o(i.device_instance_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = device_instance_find &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
</UL>

<P><STRONG><a name="[192]"></a>device_instance_free</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, vsp_device_manager_peripheral.o(i.device_instance_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = device_instance_free &rArr; pstorage_clear &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; clear_operation_execute &rArr; sm_state_change &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_clear
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_block_identifier_get
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_instance_init
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_device_delete_all
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_instance_allocate
</UL>

<P><STRONG><a name="[41]"></a>dm_pstorage_cb_handler</STRONG> (Thumb, 494 bytes, Stack size 120 bytes, vsp_device_manager_peripheral.o(i.dm_pstorage_cb_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = dm_pstorage_cb_handler &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_block_identifier_get
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_handle_initialize
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_status_bit_reset
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_evt_notify
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vsp_device_manager_peripheral.o(i.dm_init)
</UL>
<P><STRONG><a name="[60]"></a>gattc_context_apply</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, vsp_device_manager_peripheral.o(i.gattc_context_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = gattc_context_apply &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattsc_context_apply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vsp_device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[5c]"></a>gattc_context_load</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, vsp_device_manager_peripheral.o(i.gattc_context_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = gattc_context_load &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattsc_context_load
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vsp_device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[58]"></a>gattc_context_store</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, vsp_device_manager_peripheral.o(i.gattc_context_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = gattc_context_store &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattsc_context_store
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vsp_device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>gatts_context_apply</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, vsp_device_manager_peripheral.o(i.gatts_context_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = gatts_context_apply &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattsc_context_apply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vsp_device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>gatts_context_load</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, vsp_device_manager_peripheral.o(i.gatts_context_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = gatts_context_load &rArr; pstorage_load &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_load
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_trace_dump
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattsc_context_load
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vsp_device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[57]"></a>gatts_context_store</STRONG> (Thumb, 518 bytes, Stack size 120 bytes, vsp_device_manager_peripheral.o(i.gatts_context_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = gatts_context_store &rArr; app_trace_dump &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_trace_dump
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattsc_context_store
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vsp_device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>gattsc_context_apply</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, vsp_device_manager_peripheral.o(i.gattsc_context_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = gattsc_context_apply &rArr; gatts_context_apply &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_context_apply
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_context_apply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vsp_device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[5d]"></a>gattsc_context_load</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, vsp_device_manager_peripheral.o(i.gattsc_context_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = gattsc_context_load &rArr; gatts_context_load &rArr; pstorage_load &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_context_load
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_context_load
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vsp_device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[59]"></a>gattsc_context_store</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, vsp_device_manager_peripheral.o(i.gattsc_context_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = gattsc_context_store &rArr; gatts_context_store &rArr; app_trace_dump &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_context_store
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_context_store
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vsp_device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[5e]"></a>no_service_context_apply</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, vsp_device_manager_peripheral.o(i.no_service_context_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = no_service_context_apply &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vsp_device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[5a]"></a>no_service_context_load</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, vsp_device_manager_peripheral.o(i.no_service_context_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = no_service_context_load &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vsp_device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[56]"></a>no_service_context_store</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, vsp_device_manager_peripheral.o(i.no_service_context_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = no_service_context_store &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vsp_device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[197]"></a>peer_instance_init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, vsp_device_manager_peripheral.o(i.peer_instance_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = peer_instance_init &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_status_bit_reset
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_instance_free
</UL>

<P><STRONG><a name="[3d]"></a>storage_operation_dummy_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, vsp_device_manager_peripheral.o(i.storage_operation_dummy_handler))
<BR>[Address Reference Count : 1]<UL><LI> vsp_device_manager_peripheral.o(i.device_context_store)
</UL>
<P><STRONG><a name="[19f]"></a>update_status_bit_reset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, vsp_device_manager_peripheral.o(i.update_status_bit_reset))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_instance_init
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_pstorage_cb_handler
</UL>

<P><STRONG><a name="[250]"></a>channel_free</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.channel_free))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
</UL>

<P><STRONG><a name="[24e]"></a>channel_port_alloc</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, nrf_drv_gpiote.o(i.channel_port_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
</UL>

<P><STRONG><a name="[90]"></a>channel_port_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.channel_port_get))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_disable
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[24f]"></a>nrf_gpio_cfg</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, nrf_drv_gpiote.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
</UL>

<P><STRONG><a name="[91]"></a>nrf_gpio_cfg_sense_set</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpio_cfg_sense_set))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_disable
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[8f]"></a>nrf_gpiote_event_clear</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpiote_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[8e]"></a>nrf_gpiote_event_is_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_event_is_set))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[24c]"></a>pin_in_use_by_port</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.pin_in_use_by_port))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_disable
</UL>

<P><STRONG><a name="[24d]"></a>pin_in_use_by_te</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.pin_in_use_by_te))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_disable
</UL>

<P><STRONG><a name="[b0]"></a>irq_handler_twim</STRONG> (Thumb, 296 bytes, Stack size 48 bytes, nrf_drv_twi.o(i.irq_handler_twim))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = irq_handler_twim
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
</UL>

<P><STRONG><a name="[27f]"></a>nrf_drv_is_in_RAM</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_drv_is_in_RAM))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
</UL>

<P><STRONG><a name="[27e]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
</UL>

<P><STRONG><a name="[212]"></a>nrf_twim_event_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_twim_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_twim
</UL>

<P><STRONG><a name="[25a]"></a>twi_clear_bus</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, nrf_drv_twi.o(i.twi_clear_bus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = twi_clear_bus
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_nrf_drv_twi_c_a9bcf68d__nrf_delay_us
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
</UL>

<P><STRONG><a name="[25c]"></a>twim_xfer</STRONG> (Thumb, 492 bytes, Stack size 40 bytes, nrf_drv_twi.o(i.twim_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = twim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_event_check
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_is_in_RAM
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_xfer
</UL>

<P><STRONG><a name="[281]"></a>nrf_uart_event_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[280]"></a>nrf_uart_int_enable_check</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_int_enable_check))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[282]"></a>rx_byte</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.rx_byte))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[283]"></a>rx_done_event</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.rx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[284]"></a>tx_byte</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.tx_byte))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[285]"></a>tx_done_event</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.tx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[c4]"></a>uart_irq_handler</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, nrf_drv_uart.o(i.uart_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uart_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done_event
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_done_event
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_enable_check
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTE0_UART0_IRQHandler
</UL>

<P><STRONG><a name="[164]"></a>clear_operation_execute</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, pstorage.o(i.clear_operation_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = clear_operation_execute &rArr; sm_state_change &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_process
</UL>

<P><STRONG><a name="[166]"></a>clear_post_processing_run</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, pstorage.o(i.clear_post_processing_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = clear_post_processing_run &rArr; sm_state_change &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_end_procedure_run
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_restore_state_run
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_restore_state_run
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_success_run
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_page_erase_state_run
</UL>

<P><STRONG><a name="[168]"></a>cmd_process</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, pstorage.o(i.cmd_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = cmd_process &rArr; clear_operation_execute &rArr; sm_state_change &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_operation_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_enqueue
</UL>

<P><STRONG><a name="[16d]"></a>cmd_queue_element_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, pstorage.o(i.cmd_queue_element_init))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_queue_element_consume
</UL>

<P><STRONG><a name="[169]"></a>cmd_queue_enqueue</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, pstorage.o(i.cmd_queue_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = cmd_queue_enqueue &rArr; cmd_process &rArr; clear_operation_execute &rArr; sm_state_change &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_process
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_update
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_store
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_clear
</UL>

<P><STRONG><a name="[167]"></a>command_end_procedure_run</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, pstorage.o(i.command_end_procedure_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + In Cycle
<LI>Call Chain = command_end_procedure_run &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_queue_element_consume
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_sys_event_handler
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_success_run
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_api_err_code_process
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_post_processing_run
</UL>

<P><STRONG><a name="[16c]"></a>command_queue_element_consume</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, pstorage.o(i.command_queue_element_consume))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = command_queue_element_consume &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_element_init
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_end_procedure_run
</UL>

<P><STRONG><a name="[69]"></a>data_page_erase_state_run</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, pstorage.o(i.data_page_erase_state_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = data_page_erase_state_run &rArr; clear_post_processing_run &rArr; sm_state_change &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_state_change
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_err_busy_process
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_page_erase_required
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_post_processing_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[68]"></a>data_to_swap_write_state_run</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, pstorage.o(i.data_to_swap_write_state_run))
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_state_change
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_err_busy_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[1bf]"></a>flash_api_err_code_process</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, pstorage.o(i.flash_api_err_code_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = flash_api_err_code_process &rArr; command_end_procedure_run &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_end_procedure_run
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_erase
</UL>

<P><STRONG><a name="[1c0]"></a>flash_operation_success_run</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, pstorage.o(i.flash_operation_success_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = flash_operation_success_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; command_end_procedure_run &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_cmd_flash_write_execute
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_state_err_busy_process
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_page_erase_required
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_end_procedure_run
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_post_processing_run
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_sys_event_handler
</UL>

<P><STRONG><a name="[1c3]"></a>flash_page_erase</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pstorage.o(i.flash_page_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = flash_page_erase &rArr; flash_api_err_code_process &rArr; command_end_procedure_run &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_api_err_code_process
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_swap_erase_entry_run
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_erase_data_page_entry_run
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
</UL>

<P><STRONG><a name="[1c4]"></a>flash_write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pstorage.o(i.flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = flash_write &rArr; flash_api_err_code_process &rArr; command_end_procedure_run &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_api_err_code_process
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_cmd_flash_write_execute
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_write_data_swap_entry_run
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_restore_tail_entry_run
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_restore_head_entry_run
</UL>

<P><STRONG><a name="[6b]"></a>head_restore_state_run</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, pstorage.o(i.head_restore_state_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = head_restore_state_run &rArr; clear_post_processing_run &rArr; sm_state_change &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_state_change
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_err_busy_process
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_page_erase_required
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_post_processing_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[183]"></a>is_page_erase_required</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, pstorage.o(i.is_page_erase_required))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_restore_state_run
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_success_run
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_page_erase_state_run
</UL>

<P><STRONG><a name="[26a]"></a>is_word_aligned</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pstorage.o(i.is_word_aligned))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_update
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_store
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_load
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_clear
</UL>

<P><STRONG><a name="[1c2]"></a>main_state_err_busy_process</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pstorage.o(i.main_state_err_busy_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = main_state_err_busy_process &rArr; sm_state_change &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_success_run
</UL>

<P><STRONG><a name="[165]"></a>sm_state_change</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, pstorage.o(i.sm_state_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + In Cycle
<LI>Call Chain = sm_state_change &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_cmd_flash_write_execute
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_data_erase_swap_entry_run
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_erase
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_process
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_sys_event_handler
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_state_err_busy_process
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_success_run
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_end_procedure_run
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_process
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_post_processing_run
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_operation_execute
</UL>

<P><STRONG><a name="[270]"></a>state_data_erase_swap_entry_run</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, pstorage.o(i.state_data_erase_swap_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = state_data_erase_swap_entry_run
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_state_change
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
</UL>

<P><STRONG><a name="[64]"></a>state_erase_data_page_entry_run</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pstorage.o(i.state_erase_data_page_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = state_erase_data_page_entry_run &rArr; flash_page_erase &rArr; flash_api_err_code_process &rArr; command_end_procedure_run &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[66]"></a>state_restore_head_entry_run</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pstorage.o(i.state_restore_head_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = state_restore_head_entry_run &rArr; flash_write &rArr; flash_api_err_code_process &rArr; command_end_procedure_run &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>state_restore_tail_entry_run</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, pstorage.o(i.state_restore_tail_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = state_restore_tail_entry_run &rArr; flash_write &rArr; flash_api_err_code_process &rArr; command_end_procedure_run &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>state_swap_erase_entry_run</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pstorage.o(i.state_swap_erase_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = state_swap_erase_entry_run &rArr; flash_page_erase &rArr; flash_api_err_code_process &rArr; command_end_procedure_run &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>state_write_data_swap_entry_run</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pstorage.o(i.state_write_data_swap_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = state_write_data_swap_entry_run &rArr; flash_write &rArr; flash_api_err_code_process &rArr; command_end_procedure_run &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[1c1]"></a>store_cmd_flash_write_execute</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, pstorage.o(i.store_cmd_flash_write_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; command_end_procedure_run &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_success_run
</UL>

<P><STRONG><a name="[67]"></a>swap_erase_state_run</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pstorage.o(i.swap_erase_state_run))
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_state_change
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_err_busy_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[185]"></a>swap_sub_state_err_busy_process</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pstorage.o(i.swap_sub_state_err_busy_process))
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_state_change
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_restore_state_run
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_erase_state_run
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_restore_state_run
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_to_swap_write_state_run
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_page_erase_state_run
</UL>

<P><STRONG><a name="[184]"></a>swap_sub_state_state_change</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pstorage.o(i.swap_sub_state_state_change))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_sys_event_handler
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_err_busy_process
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_erase_state_run
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_data_erase_swap_entry_run
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_restore_state_run
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_to_swap_write_state_run
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_page_erase_state_run
</UL>

<P><STRONG><a name="[6a]"></a>tail_restore_state_run</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pstorage.o(i.tail_restore_state_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = tail_restore_state_run &rArr; clear_post_processing_run &rArr; sm_state_change &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_err_busy_process
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_post_processing_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[9b]"></a>nrf_saadc_buffer_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_saadc.o(i.nrf_saadc_buffer_init))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_buffer_convert
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAADC_IRQHandler
</UL>

<P><STRONG><a name="[9a]"></a>nrf_saadc_channel_input_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_drv_saadc.o(i.nrf_saadc_channel_input_set))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_channel_init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_buffer_convert
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAADC_IRQHandler
</UL>

<P><STRONG><a name="[98]"></a>nrf_saadc_event_check</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_saadc.o(i.nrf_saadc_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_buffer_convert
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAADC_IRQHandler
</UL>

<P><STRONG><a name="[214]"></a>are_app_channels</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_drv_ppi.o(i.are_app_channels))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_app_channel
</UL>

<P><STRONG><a name="[252]"></a>is_allocated_channel</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_drv_ppi.o(i.is_allocated_channel))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_enable
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_alloc
</UL>

<P><STRONG><a name="[213]"></a>is_app_channel</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_ppi.o(i.is_app_channel))
<BR><BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;are_app_channels
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_enable
</UL>

<P><STRONG><a name="[253]"></a>is_programmable_app_channel</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_drv_ppi.o(i.is_programmable_app_channel))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_enable
</UL>

<P><STRONG><a name="[b1]"></a>irq_handler_spim</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, nrf_drv_spi.o(i.irq_handler_spim))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = irq_handler_spim
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_event_check
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
</UL>

<P><STRONG><a name="[279]"></a>nrf_drv_is_in_RAM</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_drv_spi.o(i.nrf_drv_is_in_RAM))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
</UL>

<P><STRONG><a name="[256]"></a>nrf_gpio_cfg</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, nrf_drv_spi.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
</UL>

<P><STRONG><a name="[255]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrf_drv_spi.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
</UL>

<P><STRONG><a name="[211]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_spi.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_spim
</UL>

<P><STRONG><a name="[210]"></a>nrf_spim_event_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_spi.o(i.nrf_spim_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_uninit
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_spim
</UL>

<P><STRONG><a name="[259]"></a>spim_xfer</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, nrf_drv_spi.o(i.spim_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_event_check
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_is_in_RAM
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_xfer
</UL>

<P><STRONG><a name="[aa]"></a>_PrintInt</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, segger_rtt_printf.o(i._PrintInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
</UL>

<P><STRONG><a name="[ab]"></a>_PrintUnsigned</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, segger_rtt_printf.o(i._PrintUnsigned))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
</UL>

<P><STRONG><a name="[a9]"></a>_StoreChar</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, segger_rtt_printf.o(i._StoreChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
</UL>

<P><STRONG><a name="[9d]"></a>_DoInit</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, segger_rtt.o(i._DoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_ConfigUpBuffer
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_ConfigDownBuffer
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[a0]"></a>_GetAvailWriteSpace</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, segger_rtt.o(i._GetAvailWriteSpace))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_UpBuffer_Retrieve
</UL>

<P><STRONG><a name="[a5]"></a>_WriteBlocking</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, segger_rtt.o(i._WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[a4]"></a>_WriteNoCheck</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, segger_rtt.o(i._WriteNoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[f3]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app_timer.o(i.__NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[f5]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app_timer.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[f9]"></a>__NVIC_SetPendingIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app_timer.o(i.__NVIC_SetPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[f4]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_timer.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>

<P><STRONG><a name="[16e]"></a>compare_reg_update</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, app_timer.o(i.compare_reg_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = compare_reg_update &rArr; rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPendingIRQ
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_app_timer_c_cd27f9c3__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[27b]"></a>elapsed_ticks_acquire</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, app_timer.o(i.elapsed_ticks_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = elapsed_ticks_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[27c]"></a>list_deletions_handler</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, app_timer.o(i.list_deletions_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = list_deletions_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[220]"></a>list_insertions_handler</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, app_timer.o(i.list_insertions_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = list_insertions_handler &rArr; timer_list_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[f2]"></a>rtc1_stop</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, app_timer.o(i.rtc1_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_app_timer_c_cd27f9c3__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[b2]"></a>timer_list_handler</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, app_timer.o(i.timer_list_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = timer_list_handler &rArr; compare_reg_update &rArr; rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_deletions_handler
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elapsed_ticks_acquire
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI0_EGU0_IRQHandler
</UL>

<P><STRONG><a name="[221]"></a>timer_list_insert</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, app_timer.o(i.timer_list_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
</UL>

<P><STRONG><a name="[97]"></a>timer_timeouts_check</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, app_timer.o(i.timer_timeouts_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = timer_timeouts_check &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC1_IRQHandler
</UL>

<P><STRONG><a name="[f7]"></a>user_id_get</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, app_timer.o(i.user_id_get))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>

<P><STRONG><a name="[f8]"></a>user_op_alloc</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, app_timer.o(i.user_op_alloc))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>

<P><STRONG><a name="[26c]"></a>ram_end_address_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, softdevice_handler.o(i.ram_end_address_get))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_enable
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_check_ram_start
</UL>

<P><STRONG><a name="[271]"></a>sd_nvic_EnableIRQ</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, softdevice_handler.o(i.sd_nvic_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sd_nvic_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_init
</UL>

<P><STRONG><a name="[22c]"></a>lsm6ds3_enable_embedded_func</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lsm6ds3.o(i.lsm6ds3_enable_embedded_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lsm6ds3_enable_embedded_func &rArr; lsm6ds3_write_data_with_mask
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_write_data_with_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_enable_sensors
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_disable_sensors
</UL>

<P><STRONG><a name="[22a]"></a>lsm6ds3_enable_pedometer</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lsm6ds3.o(i.lsm6ds3_enable_pedometer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lsm6ds3_enable_pedometer &rArr; lsm6ds3_write_data_with_mask
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_write_data_with_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_enable_sensors
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_disable_sensors
</UL>

<P><STRONG><a name="[22f]"></a>lsm6ds3_read_fifo</STRONG> (Thumb, 310 bytes, Stack size 1584 bytes, lsm6ds3.o(i.lsm6ds3_read_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 1888<LI>Call Chain = lsm6ds3_read_fifo &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_fifo_management
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_reconfigure_fifo
</UL>

<P><STRONG><a name="[228]"></a>lsm6ds3_reconfigure_fifo</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, lsm6ds3.o(i.lsm6ds3_reconfigure_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912<LI>Call Chain = lsm6ds3_reconfigure_fifo &rArr; lsm6ds3_read_fifo &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___9_lsm6ds3_c_09874117__nrf_delay_us
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_write_data_with_mask
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_set_fifo_mode
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_set_fifo_decimators_and_threshold
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_read_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_init_sensors
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_enable_sensors
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_disable_sensors
</UL>

<P><STRONG><a name="[233]"></a>lsm6ds3_self_test</STRONG> (Thumb, 1442 bytes, Stack size 80 bytes, lsm6ds3.o(i.lsm6ds3_self_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lsm6ds3_self_test &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSystemTimeMs
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_run_self_test
</UL>

<P><STRONG><a name="[231]"></a>lsm6ds3_set_fifo_decimators_and_threshold</STRONG> (Thumb, 684 bytes, Stack size 72 bytes, lsm6ds3.o(i.lsm6ds3_set_fifo_decimators_and_threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = lsm6ds3_set_fifo_decimators_and_threshold &rArr; log_rtt_write_string &rArr; SEGGER_RTT_WriteString &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_write_string
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_write_data_with_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_reconfigure_fifo
</UL>

<P><STRONG><a name="[22e]"></a>lsm6ds3_set_fifo_mode</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lsm6ds3.o(i.lsm6ds3_set_fifo_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lsm6ds3_set_fifo_mode &rArr; lsm6ds3_write_data_with_mask
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_write_data_with_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_fifo_management
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_reconfigure_fifo
</UL>

<P><STRONG><a name="[230]"></a>lsm6ds3_set_fs</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, lsm6ds3.o(i.lsm6ds3_set_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lsm6ds3_set_fs &rArr; lsm6ds3_write_data_with_mask
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_write_data_with_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_init_sensors
</UL>

<P><STRONG><a name="[22b]"></a>lsm6ds3_set_irq</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, lsm6ds3.o(i.lsm6ds3_set_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lsm6ds3_set_irq &rArr; lsm6ds3_write_data_with_mask
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_write_data_with_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_enable_sensors
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_disable_sensors
</UL>

<P><STRONG><a name="[227]"></a>lsm6ds3_set_odr</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lsm6ds3.o(i.lsm6ds3_set_odr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lsm6ds3_set_odr &rArr; lsm6ds3_write_data_with_mask
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_write_data_with_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_wake_on_motion
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_enable_sensors
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_disable_sensors
</UL>

<P><STRONG><a name="[229]"></a>lsm6ds3_write_data_with_mask</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, lsm6ds3.o(i.lsm6ds3_write_data_with_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lsm6ds3_write_data_with_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_wake_on_motion
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_init_sensors
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_enable_sensors
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_disable_sensors
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_set_odr
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_set_irq
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_set_fs
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_set_fifo_mode
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_set_fifo_decimators_and_threshold
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_reconfigure_fifo
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_enable_pedometer
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_enable_embedded_func
</UL>

<P><STRONG><a name="[234]"></a>nrf_gpio_pin_read</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lsm6ds3.o(i.nrf_gpio_pin_read))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_self_test
</UL>

<P><STRONG><a name="[1cd]"></a>get_active_axes</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, hal_imu.o(i.get_active_axes))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_active_axes
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6ds3_active_sensors
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_power_state
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_accel
</UL>

<P><STRONG><a name="[222]"></a>lock_accel</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, hal_imu.o(i.lock_accel))
<BR><BR>[Stack]<UL><LI>Max Depth = 2016<LI>Call Chain = lock_accel &rArr; imu_power_state &rArr; stop_gyro &rArr; lsm6ds3_disable_sensors &rArr; lsm6ds3_reconfigure_fifo &rArr; lsm6ds3_read_fifo &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_write_string
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_power_state
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_active_axes
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_gyro_on
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_gyro_off
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_compass_on
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_compass_off
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_accel_on
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_accel_off
</UL>

<P><STRONG><a name="[223]"></a>lock_gyro</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, hal_imu.o(i.lock_gyro))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lock_gyro &rArr; log_rtt_write_string &rArr; SEGGER_RTT_WriteString &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_write_string
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_gyro_on
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_gyro_off
</UL>

<P><STRONG><a name="[224]"></a>lock_magnet</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, hal_imu.o(i.lock_magnet))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lock_magnet &rArr; log_rtt_write_string &rArr; SEGGER_RTT_WriteString &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_write_string
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_compass_on
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_compass_off
</UL>

<P><STRONG><a name="[1ed]"></a>hal_twim_xfer</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, hal_twim.o(i.hal_twim_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = hal_twim_xfer &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSystemTimeMs
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_xfer
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_twim_write
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_twim_read
</UL>

<P><STRONG><a name="[1ec]"></a>twim_busy</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, hal_twim.o(i.twim_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = twim_busy &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSystemTimeMs
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_twim_write
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_twim_read
</UL>

<P><STRONG><a name="[204]"></a>mrs_butterworth_bpf_init</STRONG> (Thumb, 714 bytes, Stack size 104 bytes, step_detect_2.o(i.mrs_butterworth_bpf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = mrs_butterworth_bpf_init &rArr; __hardfp_tan &rArr; __kernel_tan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initStepDetect_2
</UL>

<P><STRONG><a name="[24a]"></a>mrs_butterworth_filter</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, step_detect_2.o(i.mrs_butterworth_filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = mrs_butterworth_filter &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepStateMachine_2
</UL>

<P><STRONG><a name="[db]"></a>buffer_record</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, reports.o(i.buffer_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 2032<LI>Call Chain = buffer_record &rArr; add_record &rArr; load_output_buffer &rArr; inform_rec_tranceived &rArr;  load_output_buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_record
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_reporters
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_down_save_records
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_reporters
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accum_3axis_data
</UL>

<P><STRONG><a name="[44]"></a>spim_handler</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, hal_spim.o(i.spim_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = spim_handler &rArr; spim_xfer &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_timer_stop
</UL>
<BR>[Address Reference Count : 2]<UL><LI> hal_spim.o(i.hal_spim_init)
<LI> hal_spim.o(i.hal_spim_xfer)
</UL>
<P><STRONG><a name="[43]"></a>spim_timer_handler</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, hal_spim.o(i.spim_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = spim_timer_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSystemTimeMs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_spim.o(i.hal_spim_init)
</UL>
<P><STRONG><a name="[1e9]"></a>spim_xfer</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, hal_spim.o(i.spim_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = spim_xfer &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_handler
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spim_xfer
</UL>

<P><STRONG><a name="[4f]"></a>check_timer_cb</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, spiflash.o(i.check_timer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = check_timer_cb &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSystemTimeMs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spiflash.o(i.spiflash_init)
</UL>
<P><STRONG><a name="[4e]"></a>erase_sm</STRONG> (Thumb, 484 bytes, Stack size 24 bytes, spiflash.o(i.erase_sm))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = erase_sm &rArr; spiflash_address_command &rArr; spiflash_xfer &rArr; hal_spim_xfer &rArr; spim_xfer &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSystemTimeMs
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_check_timer
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_write_enable
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_read_status
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_enable_active_status
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_address_command
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_page_erase
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_erase_4k_block
</UL>
<BR>[Address Reference Count : 2]<UL><LI> spiflash.o(i.spiflash_erase_4k_block)
<LI> spiflash.o(i.spiflash_page_erase)
</UL>
<P><STRONG><a name="[275]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, spiflash.o(i.nrf_gpio_cfg_output))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_init
</UL>

<P><STRONG><a name="[50]"></a>protect_sm</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, spiflash.o(i.protect_sm))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = protect_sm &rArr; spiflash_address_command &rArr; spiflash_xfer &rArr; hal_spim_xfer &rArr; spim_xfer &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSystemTimeMs
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_write_enable
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_read_status
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_address_command
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_sector_protection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spiflash.o(i.spiflash_sector_protection)
</UL>
<P><STRONG><a name="[1ac]"></a>spiflash_address_command</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, spiflash.o(i.spiflash_address_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = spiflash_address_command &rArr; spiflash_xfer &rArr; hal_spim_xfer &rArr; spim_xfer &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_read
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protect_sm
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_sm
</UL>

<P><STRONG><a name="[1ad]"></a>spiflash_enable_active_status</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, spiflash.o(i.spiflash_enable_active_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = spiflash_enable_active_status &rArr; spiflash_xfer &rArr; hal_spim_xfer &rArr; spim_xfer &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sm
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_sm
</UL>

<P><STRONG><a name="[274]"></a>spiflash_global_protect</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, spiflash.o(i.spiflash_global_protect))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = spiflash_global_protect &rArr; spiflash_xfer &rArr; hal_spim_xfer &rArr; spim_xfer &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_init
</UL>

<P><STRONG><a name="[276]"></a>spiflash_read_id</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, spiflash.o(i.spiflash_read_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = spiflash_read_id &rArr; spiflash_xfer &rArr; hal_spim_xfer &rArr; spim_xfer &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_init
</UL>

<P><STRONG><a name="[1ab]"></a>spiflash_read_status</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, spiflash.o(i.spiflash_read_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = spiflash_read_status &rArr; spiflash_xfer &rArr; hal_spim_xfer &rArr; spim_xfer &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sm
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protect_sm
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_sm
</UL>

<P><STRONG><a name="[277]"></a>spiflash_write_data</STRONG> (Thumb, 110 bytes, Stack size 560 bytes, spiflash.o(i.spiflash_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = spiflash_write_data &rArr; spiflash_xfer &rArr; hal_spim_xfer &rArr; spim_xfer &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_xfer
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sm
</UL>

<P><STRONG><a name="[1aa]"></a>spiflash_write_enable</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, spiflash.o(i.spiflash_write_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = spiflash_write_enable &rArr; spiflash_xfer &rArr; hal_spim_xfer &rArr; spim_xfer &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sm
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protect_sm
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_sm
</UL>

<P><STRONG><a name="[272]"></a>spiflash_xfer</STRONG> (Thumb, 136 bytes, Stack size 56 bytes, spiflash.o(i.spiflash_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = spiflash_xfer &rArr; hal_spim_xfer &rArr; spim_xfer &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_write_string
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spim_xfer
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_wakeup
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_deep_power_down
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_write_enable
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_write_data
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_read_status
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_read_id
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_global_protect
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_enable_active_status
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_address_command
</UL>

<P><STRONG><a name="[1ae]"></a>start_check_timer</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, spiflash.o(i.start_check_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = start_check_timer &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSystemTimeMs
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sm
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_sm
</UL>

<P><STRONG><a name="[51]"></a>transfer_complete_cb</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, spiflash.o(i.transfer_complete_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = transfer_complete_cb &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spiflash.o(i.spiflash_xfer)
</UL>
<P><STRONG><a name="[4d]"></a>write_sm</STRONG> (Thumb, 450 bytes, Stack size 24 bytes, spiflash.o(i.write_sm))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = write_sm &rArr; spiflash_write_data &rArr; spiflash_xfer &rArr; hal_spim_xfer &rArr; spim_xfer &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSystemTimeMs
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_check_timer
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_write_enable
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_write_data
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_read_status
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_enable_active_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_byte_page_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spiflash.o(i.spiflash_byte_page_write)
</UL>
<P><STRONG><a name="[177]"></a>config_sanity_check</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, mem_manager.o(i.config_sanity_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = config_sanity_check &rArr; hal_update_config &rArr; ext_config_update &rArr; update_config_cb &rArr; spiflash_byte_page_write &rArr; write_sm &rArr; spiflash_write_data &rArr; spiflash_xfer &rArr; hal_spim_xfer &rArr; spim_xfer &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_update_config
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manufacture_connection_settings
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mem_manager
</UL>

<P><STRONG><a name="[e1]"></a>load_output_buffer</STRONG> (Thumb, 384 bytes, Stack size 536 bytes, mem_manager.o(i.load_output_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 1984<LI>Call Chain = load_output_buffer &rArr; inform_rec_tranceived &rArr;  load_output_buffer (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inform_rec_tranceived
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSystemTimeMs
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_retrieve_rec
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nv_storage_empty
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inform_rec_tranceived
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_record
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mem_manager
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_record
</UL>

<P><STRONG><a name="[179]"></a>manufacture_connection_settings</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, mem_manager.o(i.manufacture_connection_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = manufacture_connection_settings &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mem_manager
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_sanity_check
</UL>

<P><STRONG><a name="[182]"></a>nv_storage_empty</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mem_manager.o(i.nv_storage_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = nv_storage_empty &rArr; hal_unsent_log_len &rArr; calc_log_len &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_unsent_log_len
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inform_rec_tranceived
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_log_empty
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_output_buffer
</UL>

<P><STRONG><a name="[156]"></a>calc_log_len</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, hal_nvm.o(i.calc_log_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = calc_log_len &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_unsent_log_len
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_store_data
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_log_memory_check
</UL>

<P><STRONG><a name="[17e]"></a>copy_nvm</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_nvm.o(i.copy_nvm))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = copy_nvm &rArr; ext_copy_log &rArr; spiflash_read &rArr; spiflash_address_command &rArr; spiflash_xfer &rArr; hal_spim_xfer &rArr; spim_xfer &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_copy_log
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_log
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_store_data
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_retrieve_rec
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_mark_rec_sent
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_log_memory_check
</UL>

<P><STRONG><a name="[1eb]"></a>update_head</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, hal_nvm.o(i.update_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = update_head &rArr; hal_unsent_log_len &rArr; calc_log_len &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_unsent_log_len
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;force_word_aligned
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_store_data
</UL>

<P><STRONG><a name="[1e2]"></a>update_log</STRONG> (Thumb, 376 bytes, Stack size 312 bytes, hal_nvm.o(i.update_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = update_log &rArr; ext_store_log &rArr; spiflash_byte_page_write &rArr; write_sm &rArr; spiflash_write_data &rArr; spiflash_xfer &rArr; hal_spim_xfer &rArr; spim_xfer &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSystemTimeMs
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_store_log
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_clear_log_page
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_nvm
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_store_data
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_mark_rec_sent
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_log_memory_check
</UL>

<P><STRONG><a name="[1dc]"></a>update_tail</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, hal_nvm.o(i.update_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = update_tail &rArr; hal_unsent_log_len &rArr; calc_log_len &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_unsent_log_len
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;force_word_aligned
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_discard_tail_page
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_store_data
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_retrieve_rec
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_mark_rec_sent
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_erase_tail_block
</UL>

<P><STRONG><a name="[42]"></a>update_config_cb</STRONG> (Thumb, 552 bytes, Stack size 24 bytes, ext_flash.o(i.update_config_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = update_config_cb &rArr; spiflash_byte_page_write &rArr; write_sm &rArr; spiflash_write_data &rArr; spiflash_xfer &rArr; hal_spim_xfer &rArr; spim_xfer &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSystemTimeMs
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_wakeup
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_sector_protection
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_read
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_page_erase
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_deep_power_down
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_byte_page_write
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFLASH_RELEASE
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_config_update
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ext_flash.o(i.ext_config_update)
<LI> ext_flash.o(i.update_config_cb)
</UL>
<P><STRONG><a name="[216]"></a>led_control</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, led.o(i.led_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = led_control &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_flash_timer_handler
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led
</UL>

<P><STRONG><a name="[217]"></a>led_start_flash_timer</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, led.o(i.led_start_flash_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = led_start_flash_timer &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_write_string
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSystemTimeMs
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_over_ride
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led
</UL>

<P><STRONG><a name="[21c]"></a>led_stop_flash_timer</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, led.o(i.led_stop_flash_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = led_stop_flash_timer &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_write_string
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSystemTimeMs
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_uninit
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_flash_timer_handler
</UL>

<P><STRONG><a name="[25f]"></a>nrf_gpio_cfg</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, led.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>

<P><STRONG><a name="[21b]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, led.o(i.nrf_gpio_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_control
</UL>

<P><STRONG><a name="[219]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, led.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_uninit
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_control
</UL>

<P><STRONG><a name="[21a]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, led.o(i.nrf_gpio_pin_clear))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_uninit
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_flash_timer_handler
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_control
</UL>

<P><STRONG><a name="[218]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, led.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_uninit
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_flash_timer_handler
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_control
</UL>

<P><STRONG><a name="[38]"></a>battery_adc_callback</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, battery.o(i.battery_adc_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = battery_adc_callback &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_reading_sm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> battery.o(i.battery_init)
</UL>
<P><STRONG><a name="[100]"></a>battery_enable_charging</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, battery.o(i.battery_enable_charging))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = battery_enable_charging
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq25120_charge_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_self_test
</UL>

<P><STRONG><a name="[36]"></a>battery_measurement_timer_handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, battery.o(i.battery_measurement_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = battery_measurement_timer_handler &rArr; battery_reading_sm &rArr; app_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_reading_sm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> battery.o(i.battery_init)
</UL>
<P><STRONG><a name="[10e]"></a>battery_monitor_start</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, battery.o(i.battery_monitor_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = battery_monitor_start &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_self_test
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_init
</UL>

<P><STRONG><a name="[111]"></a>battery_monitor_stop</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, battery.o(i.battery_monitor_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = battery_monitor_stop &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_self_test
</UL>

<P><STRONG><a name="[ff]"></a>battery_reading_sm</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, battery.o(i.battery_reading_sm))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = battery_reading_sm &rArr; app_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_self_test
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_init
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_sm_timer_handler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_measurement_timer_handler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_adc_callback
</UL>

<P><STRONG><a name="[37]"></a>battery_sm_timer_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, battery.o(i.battery_sm_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = battery_sm_timer_handler &rArr; battery_reading_sm &rArr; app_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_reading_sm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> battery.o(i.battery_init)
</UL>
<P><STRONG><a name="[10d]"></a>battery_update_status</STRONG> (Thumb, 566 bytes, Stack size 48 bytes, battery.o(i.battery_update_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = battery_update_status &rArr; bq25120_read_status &rArr; bq2510_reg_defaults &rArr; bq25120_write_data_with_mask &rArr; bq25120_i2c_read &rArr; hal_twim_read &rArr; twim_busy &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSystemTimeMs
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq25120_read_status
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq25120_charger_connected
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_self_test
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_report
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_init
</UL>

<P><STRONG><a name="[260]"></a>nrf_gpio_cfg</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, battery.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>

<P><STRONG><a name="[104]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, battery.o(i.nrf_gpio_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_self_test
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_init
</UL>

<P><STRONG><a name="[10c]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, battery.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_self_test
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_init
</UL>

<P><STRONG><a name="[10b]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, battery.o(i.nrf_gpio_pin_clear))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_self_test
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_reading_sm
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_monitor_stop
</UL>

<P><STRONG><a name="[14b]"></a>bq2510_reg_defaults</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, bq25120.o(i.bq2510_reg_defaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = bq2510_reg_defaults &rArr; bq25120_write_data_with_mask &rArr; bq25120_i2c_read &rArr; hal_twim_read &rArr; twim_busy &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___9_bq25120_c_a722ed14__nrf_delay_us
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq25120_write_data_with_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq25120_read_status
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq25120_init
</UL>

<P><STRONG><a name="[150]"></a>bq25120_i2c_idle</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bq25120.o(i.bq25120_i2c_idle))
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq25120_read_status
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq25120_en_shipmode
</UL>

<P><STRONG><a name="[151]"></a>bq25120_i2c_read</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, bq25120.o(i.bq25120_i2c_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = bq25120_i2c_read &rArr; hal_twim_read &rArr; twim_busy &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_twim_read
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq25120_write_data_with_mask
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq25120_read_status
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq25120_init
</UL>

<P><STRONG><a name="[14c]"></a>bq25120_write_data_with_mask</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, bq25120.o(i.bq25120_write_data_with_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = bq25120_write_data_with_mask &rArr; bq25120_i2c_read &rArr; hal_twim_read &rArr; twim_busy &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_debug_priority
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_twim_write
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq25120_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq2510_reg_defaults
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq25120_en_shipmode
</UL>

<P><STRONG><a name="[14e]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bq25120.o(i.nrf_gpio_pin_clear))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq25120_i2c_wakeup
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq25120_i2c_idle
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq25120_read_status
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq25120_charge_disable
</UL>

<P><STRONG><a name="[14d]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bq25120.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq25120_i2c_wakeup
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq25120_i2c_idle
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq25120_read_status
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bq25120_charge_disable
</UL>

<P><STRONG><a name="[c3]"></a>__NVIC_SystemReset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, system_nrf52.o(i.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[c7]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>

<P><STRONG><a name="[d7]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[d6]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[34]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
